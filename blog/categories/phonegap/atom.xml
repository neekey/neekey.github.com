<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: phoneGap | Neekey]]></title>
  <link href="http://neekey.github.com/blog/categories/phonegap/atom.xml" rel="self"/>
  <link href="http://neekey.github.com/"/>
  <updated>2012-02-09T23:41:00+08:00</updated>
  <id>http://neekey.github.com/</id>
  <author>
    <name><![CDATA[neekey(niyunjian)]]></name>
    <email><![CDATA[ni184775761@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[phoneGap+nodejs图片上传(二)]]></title>
    <link href="http://neekey.github.com/blog/2012/01/31/phonegap-plus-nodejstu-pian-shang-chuan-2/"/>
    <updated>2012-01-31T16:50:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/31/phonegap-plus-nodejstu-pian-shang-chuan-2</id>
    <content type="html"><![CDATA[<p>上一篇文章已经介绍了客户端（phoneGap）中图片上传的相关技术。下面介绍服务器端（nodejs）对图片上传的处理。</p>

<p>在对服务器端这边进行编码之前，在网上找了几篇关于nodejs处理文件上传的文章，基本上是使用<a href="https://github.com/visionmedia/connect-form">Connect Form</a>这个模块，但是实际调试的时候发现异常。仔细看了一下这个模块的说明，原来目前已经被废弃，并最终会被移除。对于文件上传的处理，<code>bodyParser()</code>目前已经直接支持。</p>

<!--more-->


<h3>上传文件信息获取</h3>

<p>因此，对于文件上传的处理，首先需要引入<code>bodyParser()</code>:</p>

<p>```javascript
app.configure(function(){</p>

<pre><code>app.use(express.bodyParser());
</code></pre>

<p>});
```</p>

<p>然后通过<code>req</code>中的<code>files</code>，根据文件的字段名来获取上传的文件信息。</p>

<p>```javascript
app.post( '/upload', function( req, res ){</p>

<pre><code>var image = req.files.image;
console.log( image );
console.log( image.path );
console.log( image.length );
console.log( image.filename );
console.log( image.mime );
</code></pre>

<p>});
```</p>

<p>上面的代码<code>req.files.image</code>中的<code>image</code>是我在客户端中指定的字段名，然后我们可以通过这个文件信息对象，获取到文件保存到服务器端的路径(<code>path</code>),文件的大小(<code>length</code>),文件名(<code>filename</code>),文件的MIME值(<code>mime</code>)。</p>

<h3>图片类型验证</h3>

<p>通过上面的信息，我们可以利用<code>fs</code>模块，对图片进行重命名等操作。但是在介绍客户端中的上传时，提到过，我们利用phoneGap选取文件的时候，无法获取文件的类型信息（MIME类型甚至没有后缀名）。因此在服务器端，我们不能仅仅凭借客户端发送过来的MIME值来验证文件类型。</p>

<p>解决这个问题最根本的方法是解析二进制的文件头，借此来判断文件的实际类型。根据这个需求，我写了一个简单的模块<a href="https://github.com/neekey/gettype">gettype</a>.</p>

<p>这个模块的API非常简单,给定文件的路径，然后文件类型会在回调函数中作为参数返回。不过因为自身需求有限，暂时只支持常用图片类型<code>JPEG|PNG|BMP|GIF</code>的判断。</p>

<p>```javascript
var GetType = require( 'getType' );
var pathToParse = 'images/jpeg.jpg';</p>

<p>GetType.parse( pathToParse, function( err, type ){</p>

<pre><code>if( err ){
    console.log( 'file format parse error!' );
}
else {
    console.log( 'file format is : ' + type );
}
</code></pre>

<p>});
```</p>

<p>完成了上面两部，基本上后端这边主要的技术难点就解决了，接下来还需要完成：</p>

<ul>
<li>结合上面两个技术点做文件的大小和类型验证</li>
<li>文件重命名</li>
<li>将文件信息写入到数据库</li>
<li>想客户端返回结果</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phoneGap+nodejs图片上传(一)]]></title>
    <link href="http://neekey.github.com/blog/2012/01/26/phonegap-plus-nodejstu-pian-shang-chuan-1/"/>
    <updated>2012-01-26T17:13:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/26/phonegap-plus-nodejstu-pian-shang-chuan-1</id>
    <content type="html"><![CDATA[<p><strong>继续捣鼓毕设！</strong></p>

<p>前两天将登陆和注册这些通用功能搞定后，现在需要解决从手机端上传图片到服务器的需求。先来一张目前登陆界面截图吧：</p>

<p><img src="/images/posts/st_login.jpg" alt="secondaryTrading_login" /></p>

<p>手机上传图片的功能主要有两方面:</p>

<ul>
<li>客户端，phoneGap是否提供了接口可以让用户选择图片以及拍照上传。选择了图片后的上传方式又是如何。</li>
<li>服务器端，主要是接受客户端的请求，对图片信息进行验证和保存。</li>
</ul>


<!--more-->


<h2>phoneGap</h2>

<p><em>注意，下面的代码实例在android中运行正常，但是不同平台可能会有区别，具体应用中，请仔细阅读API后面对不同平台的Hack!!</em></p>

<p>好，回到主题！phoneGap这边主要分成两块内容</p>

<h3>一、图片的获取</h3>

<p>图片的获取主要靠API中的Camera对象</p>

<p><strong>Camera</strong></p>

<blockquote><p>The camera object provides access to the device's default camera application.</p></blockquote>

<p>Camera对象提供了方法来调用系统默认的拍照程序。</p>

<p>Camera对象只有一个方法<code>getPicture</code>,通过给定options，可以指定返回图片的<code>base64编码字符串</code>或者图片的本地URI。</p>

<p><strong>getPicture</strong></p>

<p><code>javascript
Camera.getPicture( cameraSuccess, cameraError, [ cameraOptions ] );
</code></p>

<p><strong>cameraOptions</strong></p>

<ul>
<li>quality: 保存的图片质量（个人觉得应该是指拍照的情况），数字，范围为：0-100</li>
<li>destinationType: 选择返回的图片数据格式。<code>URI</code>或者是<code>base64 encoded string</code>,这两个值定义如下：</li>
</ul>


<p>``` javascript
Camera.DestinationType = {</p>

<pre><code>DATA_URL : 0,                // Return image as base64 encoded string
FILE_URI : 1                 // Return image file URI
</code></pre>

<p>};
<code>``
* sourceType: 设置图片的来源，拍照或者从图库中寻找（但是实际有三种选项，</code>PHOTOLIBRARY<code>和</code>SAVEDPHOTOALBUM`和区别不是很清楚哈～）</p>

<p>``` javascript
Camera.PictureSourceType = {</p>

<pre><code>PHOTOLIBRARY : 0,
CAMERA : 1,
SAVEDPHOTOALBUM : 2
</code></pre>

<p>};
```
* allowEdit: 允许在图片被确认选择前进行简单的编辑
* EncodingType: 设置照片的格式（应该是针对拍照的情况）</p>

<p>```
Camera.EncodingType = {</p>

<pre><code>JPEG : 0,               // Return JPEG encoded image
PNG : 1                 // Return PNG encoded image
</code></pre>

<p>};
<code>``
* targetWidth: 设定图片的宽度
* targetHeight: 设定图片的高度
* MediaType: 设置可以选取的文件类型（可以是只有图片，只有视频，或者都可以），这个选项只有在</code>sourceType<code>不是</code>Camera.PictureSourceType.CAMERA`才起作用</p>

<p>```
Camera.MediaType = {</p>

<pre><code>PICTURE: 0,             // allow selection of still pictures only. DEFAULT. Will return format specified via DestinationType
VIDEO: 1,               // allow selection of video only, WILL ALWAYS RETURN FILE_URI
ALLMEDIA : 2            // allow selection from all media types
</code></pre>

<p>}
```</p>

<p><strong>代码示例</strong></p>

<p>``` javascript
navigator.camera.getPicture(onSuccess, onError, {</p>

<pre><code>quality: 50,
destinationType: Camera.DestinationType.FILE_URI,
sourceType: navigator.camera.PictureSourceType.PHOTOLIBRARY
</code></pre>

<p>});</p>

<p>function onSuccess( imageURI ) {</p>

<pre><code>alert( imageURI );
</code></pre>

<p>};</p>

<p>function onError( msg ){</p>

<pre><code>alert( '图片获取失败:' + msg );
</code></pre>

<p>}
```</p>

<p>注意下面设置返回为图片的URI，除此之外没有其他参数。图片URI大概是这个样子：
<code>content://media/external/images/media/4</code>
我们将这段<code>URI</code>设置给<code>img</code>元素的<code>src</code>属性来实现本地图片，但是除此之外，<strong>貌似无法知道图片的具体格式</strong>，所以后面会涉及到后端nodejs的后端校验。</p>

<h3>二、图片上传</h3>

<p>上面介绍了如何让用户选取图片，下面介绍下文件的上传。</p>

<p>phoneGap中封装了对手机中的文件进行操作的一些常用方法。其中<code>FileTransfer</code>对象允许你通过调用其实例对象的<code>upload</code>方法将本地文件上传到服务器。</p>

<p><code>FileTransfer</code>使用<code>HTTP multi-part POST</code>请求. 支持<code>HTTP</code>和<code>HTTPS</code>协议. 可以通过传递一个<code>FileUploadOptions</code>对象到<code>upload</code>方法，来设置上传相关的参数.</p>

<p><strong>upload</strong>方法的具体使用直接看代码吧：</p>

<p>```javascript
var options = new FileUploadOptions();
var ft = new FileTransfer();</p>

<p>options.fileKey= 'image';   // 相当与表单中的name字段
options.fileName= '图片名称';
options.mimeType= "image/png";
options.params = {</p>

<pre><code>field1: 'value1',
field2: 'value2',
...
</code></pre>

<p>};                          // 跟随文件一起发送的自定义额外的字段</p>

<p>ft.upload( imageURI, url, op.success, op.error, options );</p>

<p>function success( fileUploadResult ){</p>

<pre><code>alert( '文件上传成功' );
</code></pre>

<p>}</p>

<p>function error( fileTransferError ){</p>

<pre><code>alert( '文件上传失败' );
</code></pre>

<p>}
```</p>

<p>接下来简单介绍<code>FileUploadResult</code>和<code>FileTransferError</code></p>

<p><strong>FileUploadResult</strong></p>

<p>Properties:</p>

<ul>
<li>bytesSent：总共传送到服务器的字节数</li>
<li>responseCode：服务器返回的HTTP响应码</li>
<li>response：服务其返回数据</li>
</ul>


<p><strong>fileTransferError</strong></p>

<p>文件操作相关的方法出现的异常对象都是使用该对象。</p>

<p>Properties:</p>

<ul>
<li>code: 预先定义的错误代码.</li>
</ul>


<p>预定义的代码有以下三种：</p>

<ul>
<li>FileTransferError.FILE_NOT_FOUND_ERR 文件未找到</li>
<li>FileTransferError.INVALID_URL_ERR 非法的URL</li>
<li>FileTransferError.CONNECTION_ERR 连接错误</li>
</ul>


<p><strong>OK！phoneGap这边主要就是上面两个方法，下一篇文章继续介绍nodejs这边的细节。</strong></p>
]]></content>
  </entry>
  
</feed>

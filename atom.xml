<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Neekey]]></title>
  <link href="http://neekey.github.com/atom.xml" rel="self"/>
  <link href="http://neekey.github.com/"/>
  <updated>2012-08-24T17:36:31+08:00</updated>
  <id>http://neekey.github.com/</id>
  <author>
    <name><![CDATA[neekey(niyunjian)]]></name>
    <email><![CDATA[ni184775761@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[升级SVN1.6-1.7]]></title>
    <link href="http://neekey.github.com/blog/2012/08/24/sheng-ji-svn1-dot-6-1-dot-7/"/>
    <updated>2012-08-24T17:06:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/08/24/sheng-ji-svn1-dot-6-1-dot-7</id>
    <content type="html"><![CDATA[<p>SVN这个东西虽然不好用（当然也是因为自身没有重视，但是谁让GIT这么好用呢&#8230;!），但是公司暂时用的还是SVN，因此还是不得不每天应对它。</p>

<p>由于一直用<code>phpstorm</code>因此SVN的操作都是GUI，非常方便（推荐&#8230;!）,但是今天由于有个需求我需要写个命令让SVN自动更新，因此需要在终端中直接使用SVN的命令行工具，但是&#8230;关键时刻就给我掉链子了!</p>

<p>在终端中输入:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn update</span></code></pre></td></tr></table></div></figure>


<p>然后就悲剧了，提示项目的svn是1.7及以上的，我的svn版本太低!表示记得前一阵子刚刚更新过了的。用<code>svn version</code>一看，果然是1.6.</p>

<p>但是1.7确实是记得手动更新过的，不甘心，在目录中找，果然在<code>/usr/local/bin/</code>中找到了1.7的svn版本，然后在<code>/usr/bin/</code>中找到了1.6版本的svn!</p>

<p>系统默认先调用<code>/usr/bin</code>中的!</p>

<p>于是定位到原因，估计是升级系统到<code>moutain lion</code>的时候，又自动在<code>/usr/bin</code>中给我安装了系统自带的<code>1.6</code>的svn，于是覆盖了我的1.7的&#8230;悲剧!</p>

<p>于是&#8230;最简单的方法，就是把1.7的覆盖掉<code>local/bin</code>中的1.6版本!覆盖完之后，在终端中查看，果然<code>version</code>变成1.7了，于是继续<code>svn update</code>，结果接续报错：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn: E170000: Unrecognized URL scheme for http*</span></code></pre></td></tr></table></div></figure>


<p>F******k!</p>

<p>好吧，Google之，得到答案如下：<a href="http://azimbabu.blogspot.com/2008/07/using-svn-and-got-unrecognized-url.html">答案</a></p>

<p>没细看&#8230;反正SVN要使用<code>http</code>类型的仓库需要某块支持，然后报这个错误意味着它可能找不到一个名为<code>neon</code>的模块了。因此需要重新编译安装svn，告诉它这个模块在哪里。</p>

<p>因此做法是：</p>

<ul>
<li>下载最新的<a href="http://www.webdav.org/neon">neon</a>，然后<code>./configure</code>, <code>make</code>, <code>make install</code>安装好</li>
<li>配置SVN源码 :</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span> ./configure --with-ssl --with-apr<span class="o">=</span>/usr/local/apache2/bin/apr-config --with-apr-util<span class="o">=</span>/usr/local/apache2/bin/apu-config --with-neon<span class="o">=</span>/usr/local
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>编译安装：<code>make</code>, <code>make install</code></li>
</ul>


<p>在配置SVN源码之前，细心的我还是发现了我的路径里面不存在/<code>usr/local/apache2</code>这个目录，看了下面的评论，这个应该是在你要配置一台svn服务器时使用，因此像我这种情况，就直接使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span> ./configure --with-ssl --with-neon<span class="o">=</span>/usr/local
</span></code></pre></td></tr></table></div></figure>


<p>就OK了!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cordova(PhoneGap)插件编写]]></title>
    <link href="http://neekey.github.com/blog/2012/06/05/cordova-phonegapcha-jian-bian-xie/"/>
    <updated>2012-06-05T08:40:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/06/05/cordova-phonegapcha-jian-bian-xie</id>
    <content type="html"><![CDATA[<p>PhoneGap的插件机制为我们提供了自由拓展Native API的可能。但是网络上和PhoneGap插件开发相关的资料较少，本文介绍插件开发的简单过程。</p>

<p>参考资料：</p>

<p><a href="http://wiki.phonegap.com/w/page/36753494/How%20to%20Create%20a%20PhoneGap%20Plugin%20for%20Android">How to Create a PhoneGap Plugin for Android</a></p>

<p><a href="http://simonmacdonald.blogspot.ca/2012/04/migrating-your-phonegap-plugins-to.html">Migrating your PhoneGap Plugins to Version 1.5+</a></p>

<h2>PhoneGap的Plugin原理</h2>

<h3>PhoneGap由两部分组件构成：</h3>

<ul>
<li>PhoneGap JavaScript API将native功能暴露给运行在浏览器中的JavaScript</li>
<li>被PhoneGap JavaScript API调用的native code（JAVA）</li>
</ul>


<p>PhoneGap的这种方式让JavaScript可以调用手机的常用功能。</p>

<h3>局限性</h3>

<p>JavaScript在处理一些繁重的任务时，其效率与原生的代码不能比。另外，JavaScript也不能在后台运行，所以我们无法用JavaScript处理后台服务。因此如果我们需要实现一些复杂的商业功能，那么应该尽量使用原生的语言编写。</p>

<h3>解决方案</h3>

<p>自然地，解决方案就是扩展暴露更多原生的手机功能给JavaScript，让它能做更多的事情。要实现这点，需要两个关键点：</p>

<ul>
<li>需要一个实现响应功能的原生代码编写的组件</li>
<li>需要构造一个JavaScript API</li>
</ul>


<p>需要注意的是，你需要为每一个你想要实现的系统编写一份独立的原生组件。所有这些原生代码编写的组件都必须与响应的JavaScript API配套。</p>

<p>而这种解决方案也就是PhoneGap提供的插件方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Map JavaScript API v3 常用功能总结]]></title>
    <link href="http://neekey.github.com/blog/2012/06/03/googlemapjavascriptapiv3chang-yong-gong-neng-zong-jie/"/>
    <updated>2012-06-03T15:01:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/06/03/googlemapjavascriptapiv3chang-yong-gong-neng-zong-jie</id>
    <content type="html"><![CDATA[<p><img src="http://neekey.github.com/images/posts/googleMap.png" alt="image" /></p>

<p>本文将总结Google Map API使用中最简单也是最常用的一些操作以及相关的概念。如果你需要更加详细的信息，那么最好直接详细地阅读Google提供的关于Map的<a href="https://developers.google.com/maps/documentation/javascript/tutorial">文档</a>.</p>

<!--more-->


<h2>在页面中引入Google Map 服务</h2>

<p>在使用Google Map服务之前，我们必须在我们的页面中引入响应的脚本，在页面中插入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span>
</span><span class='line'>  <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;https://maps.google.com/maps/api/js?sensor=set_to_true_or_false&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>sensor</code>参数用于指明此应用程序是否使用传感器确定用户的位置。</p>

<h2>异步加载Google Map API</h2>

<p>我们也可以在需要使用Google Map服务的时候动态地添加资源，并指定回调函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="kd">function</span> <span class="nx">initialize</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">myLatlng</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="o">-</span><span class="mf">34.397</span><span class="p">,</span> <span class="mf">150.644</span><span class="p">);</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">myOptions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">zoom</span><span class="o">:</span> <span class="mi">8</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">center</span><span class="o">:</span> <span class="nx">myLatlng</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">mapTypeId</span><span class="o">:</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">MapTypeId</span><span class="p">.</span><span class="nx">ROADMAP</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Map</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;map_canvas&quot;</span><span class="p">),</span> <span class="nx">myOptions</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">loadScript</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">script</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;script&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">script</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s2">&quot;text/javascript&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">script</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s2">&quot;http://maps.google.com/maps/api/js?sensor=false&amp;callback=initialize&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">loadScript</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意其中使用<code>callback</code>参数指定了回调函数名，其原理同JSONP</p>

<h2>初始化Google Map对象</h2>

<p><img src="http://neekey.github.com/images/posts/googleMapInit.png" alt="image" /></p>

<p>所有需要在页面中显示地图视图的行为都必须以初始化一个<a href="https://developers.google.com/maps/documentation/javascript/reference#Map">Map</a>对象为起点。每个<code>Map</code>对象的显示都需要指定一个页面中的dom结构作为容器，并给定一定的配置，如下面的代码所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myLatlng</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="o">-</span><span class="mf">34.397</span><span class="p">,</span> <span class="mf">150.644</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">myOptions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">zoom</span><span class="o">:</span> <span class="mi">8</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">center</span><span class="o">:</span> <span class="nx">myLatlng</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">mapTypeId</span><span class="o">:</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">MapTypeId</span><span class="p">.</span><span class="nx">ROADMAP</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Map</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;map_canvas&quot;</span><span class="p">),</span> <span class="nx">myOptions</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，map对象将id为map_canvas（主要，dom容器只要是一般的div等容器就可以）作为容器，并指定了初始化<a href="https://developers.google.com/maps/documentation/javascript/reference#MapOptions">配置信息</a>。上例中的配置信息包括：</p>

<ul>
<li>zoom： 地图的缩放级别</li>
<li>center： 地图中心位置</li>
<li>mapTypeId： 用户指定地图显示类别</li>
</ul>


<h3>位置对象LatLng</h3>

<p>在Google Map API使用中，我们经常需要对经纬度坐标进行操作，而所有的操作都会被封装成<a href="https://developers.google.com/maps/documentation/javascript/reference#LatLng">LatLng</a>对象，其构造方法为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myLatlng</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="err">维度</span><span class="p">(</span><span class="nx">latitude</span><span class="p">),</span> <span class="err">经度</span><span class="p">(</span><span class="nx">longitude</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>地图显示常用操作</h2>

<p>有了<code>Map</code>对象后，我们可以通过调用其方法对地图的显示做调整，下面介绍常用的几个方法：</p>

<ul>
<li>setCenter(LatLng) 设置地图显示中心的位置</li>
<li>setZoom（Number） 设置地图的缩放级别</li>
<li>fitBounds(<a href="https://developers.google.com/maps/documentation/javascript/reference#LatLngBounds">LatLngBounds</a>) 使得地图显示适应指定的包围盒&#8230;(翻译的不好，就是使得一个指定的矩形区域能在地图中显示出来)</li>
</ul>


<p>其中<code>fitBounds</code>方法在我们需要在地图上显示多个结果的时候非常有用。使用方法也非常简单。</p>

<p>假设我们现在有这么写个坐标位置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">beaches</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">[</span><span class="s1">&#39;Bondi Beach&#39;</span><span class="p">,</span> <span class="o">-</span><span class="mf">33.890542</span><span class="p">,</span> <span class="mf">151.274856</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
</span><span class='line'>          <span class="p">[</span><span class="s1">&#39;Coogee Beach&#39;</span><span class="p">,</span> <span class="o">-</span><span class="mf">33.423036</span><span class="p">,</span> <span class="mf">151.259052</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
</span><span class='line'>          <span class="p">[</span><span class="s1">&#39;Cronulla Beach&#39;</span><span class="p">,</span> <span class="o">-</span><span class="mf">34.028249</span><span class="p">,</span> <span class="mf">121.157507</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
</span><span class='line'>          <span class="p">[</span><span class="s1">&#39;Manly Beach&#39;</span><span class="p">,</span> <span class="o">-</span><span class="mf">33.80010128657071</span><span class="p">,</span> <span class="mf">151.28747820854187</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
</span><span class='line'>          <span class="p">[</span><span class="s1">&#39;Maroubra Beach&#39;</span><span class="p">,</span> <span class="o">-</span><span class="mf">33.450198</span><span class="p">,</span> <span class="mf">151.259302</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么我们只须先构造一个空的Bounds对象，然后将这些坐标一一添加进这个Bounds就能得到一个同时包含这里所有点的Bounds了:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="kd">var</span> <span class="nx">bounds</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLngBounds</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">beach</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">latLng</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">beach</span> <span class="o">=</span> <span class="nx">beaches</span><span class="p">[</span> <span class="nx">i</span> <span class="p">];</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">latLng</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="nx">beach</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">beach</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>          <span class="nx">Bounds</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span> <span class="nx">latLng</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span></code></pre></td></tr></table></div></figure>


<p>其中extend的作用就是扩展Bounds以使得给定的坐标位置被包含进去。</p>

<h2>向地图中添加图标</h2>

<p>本快内容主要分为两块，添加标记<a href="https://developers.google.com/maps/documentation/javascript/reference#Marker">Marker</a>和添加信息窗口<a href="https://developers.google.com/maps/documentation/javascript/reference#InfoWindow">infoWindow</a>，</p>

<h3>添加标记</h3>

<p><img src="http://neekey.github.com/images/posts/googleMapMarker.png" alt="image" /></p>

<p>每个标记都是一个<code>google.maps.Marker</code>对象，在实例化时需要给定一定的配置信息，如标记的位置。下面的例子中直接在配置信息中制定了显示的<code>Map</code>对象。我们也可以通过Marker对象的<code>setMap</code>方法来制定显示在那个map实例中。要隐藏标记时，只需设置<code>setMap(null)</code>便可:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myLatlng</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="o">-</span><span class="mf">25.363882</span><span class="p">,</span><span class="mf">131.044922</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">myOptions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">zoom</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">center</span><span class="o">:</span> <span class="nx">myLatlng</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">mapTypeId</span><span class="o">:</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">MapTypeId</span><span class="p">.</span><span class="nx">ROADMAP</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Map</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;map_canvas&quot;</span><span class="p">),</span> <span class="nx">myOptions</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">marker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Marker</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">position</span><span class="o">:</span> <span class="nx">myLatlng</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">map</span><span class="o">:</span> <span class="nx">map</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">title</span><span class="o">:</span><span class="s2">&quot;Hello World!&quot;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      
</span></code></pre></td></tr></table></div></figure>


<h3>添加信息窗口</h3>

<p><img src="http://neekey.github.com/images/posts/googleMapInfoWindow.png" alt="image" /></p>

<p>每个信息窗口都是一个<code>google.maps.InfoWindow</code>对象，在实例化时需要给定一定的配置信息，如窗口中的内容，标记的位置。</p>

<p>其中需要说明的是，配置信息中的<code>content</code>即可以是html字符串，也可以是一个dom节点。要让一个信息窗口显示出来，我们可以调用它的open方法，并制定显示在那个Map实例对象中。注意，如果在信息窗口构造时的配置中已经制定了位置（通过position字段），那么直接使用<code>infoWindow.open( map )</code>，就可以显示在地图的制定位置上。当然，我们也可以将信息窗口的显示绑定在已经在地图中的标记对象中，只需在open的第二个参数中制定标记对象即可<code>infoWindow.open( map, marker )</code>，如下面代码中所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="kd">var</span> <span class="nx">myLatlng</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="o">-</span><span class="mf">25.363882</span><span class="p">,</span><span class="mf">131.044922</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">myOptions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">zoom</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">center</span><span class="o">:</span> <span class="nx">myLatlng</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">mapTypeId</span><span class="o">:</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">MapTypeId</span><span class="p">.</span><span class="nx">ROADMAP</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Map</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;map_canvas&quot;</span><span class="p">),</span> <span class="nx">myOptions</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">contentString</span> <span class="o">=</span> <span class="s1">&#39;Hello World&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">infowindow</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">InfoWindow</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">content</span><span class="o">:</span> <span class="nx">contentString</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">marker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Marker</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">position</span><span class="o">:</span> <span class="nx">myLatlng</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">map</span><span class="o">:</span> <span class="nx">map</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">title</span><span class="o">:</span><span class="s2">&quot;Uluru (Ayers Rock)&quot;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="nx">marker</span><span class="p">,</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">infowindow</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">map</span><span class="p">,</span><span class="nx">marker</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>事件绑定</h2>

<p>使用google.maps.event.addListener()方法来进行事件的监听。该方法接受三个参数：一个对象，一个待侦听事件以及一个在指定事件发生时调用的函数。</p>

<p>举几个例子，更加详细的介绍参考<a href="https://developers.google.com/maps/documentation/javascript/events">文档</a>。</p>

<p>监听地图的缩放：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="nx">map</span><span class="p">,</span> <span class="s1">&#39;zoom_changed&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="cm">/* 状态改变时间不提供回调参数，我们需要去手动获取数值，比如利用map.getZoom()来获取当前的缩放级别 */</span>
</span><span class='line'>      <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>标记的点击：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span> <span class="nx">marker</span><span class="p">,</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">placeMarker</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">latLng</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>监听dom事件:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">addDomListener</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="nx">initialize</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外关于事件需要补充的一点是，当我们初始化map的时候，其div为不显示的，之后通过某种逻辑过程显示出来时，其地图在容器中的显示会出现不完整的情况，这时候我们需要告诉组件去重新设置显示区域的大小：</p>

<blockquote><p>Developers should trigger this event on the map when the div changes size: google.maps.event.trigger(map, &#8216;resize&#8217;)</p></blockquote>

<h2>地址解析</h2>

<p>Google Map API 本身已经提供了非常方便的地址解析与反地址解析的方法，使用方法非常简单：</p>

<p>实例化一个<code>google.maps.Geocoder</code>对象，调用<code>Geocoder.geocode()</code>方法，在其回到中获取结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="nx">geocoder</span><span class="p">.</span><span class="nx">geocode</span><span class="p">(</span> <span class="p">{</span> <span class="s1">&#39;address&#39;</span><span class="o">:</span> <span class="nx">address</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">==</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">GeocoderStatus</span><span class="p">.</span><span class="nx">OK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">/* do somethind */</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Geocode was not successful for the following reason: &quot;</span> <span class="o">+</span> <span class="nx">status</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>此处介绍一些第一个参数中最重要的两个字段，根据不同的搜索需求，我们每次只需要给定其中一个参数即可:</p>

<ul>
<li>address (required*) — 你需要解析的地址</li>
<li>latLng (required*) — 你需要解析的LatLng对象</li>
</ul>


<p>两种方式的结果返回值格式都一致，具体格式可以看<a href="https://developers.google.com/maps/documentation/javascript/geocoding#GeocodingResponses">文档</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Offline Web applications -- Manifest小试]]></title>
    <link href="http://neekey.github.com/blog/2012/05/04/offlinewebapplications-manifestxiao-shi/"/>
    <updated>2012-05-04T16:20:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/05/04/offlinewebapplications-manifestxiao-shi</id>
    <content type="html"><![CDATA[<p><img src="http://neekey.github.com/images/posts/manifest.png" alt="manifest" /></p>

<p>今天简单地对HTML5的Offline特性进行了了解，把一些简单表层的知识点总结，分享下。</p>

<hr />

<h2>什么是Manifest</h2>

<p>为了让用户在没有网络连接的状况下能继续的使用Web Application，HTML5提供了对于Offline的支持：通过一个叫做manifest的配置文件，我们可以提供一个列表，让浏览器缓存我们指定的文件，并在以后的请求中都直接直接使用本地的缓存文件而不用去向服务器请求数据。</p>

<p>HTML5便是通过这种机制来实现离线应用</p>

<p><em>注意：manifest的缓存控制是覆盖Http的那些缓存机制的（cache-control/304）</em></p>

<!--more-->


<h2>配置manifest</h2>

<ul>
<li>在我们的html标签中引入manifest文件</li>
</ul>


<p><code>&lt;html manifest="mysite.manifest"&gt;</code></p>

<ul>
<li>manifest文件的<code>Content-Type</code>值必须为<code>text/cache-manifest</code></li>
</ul>


<p>然后我们就可以通过编辑manifest文件来对缓存做配置了。</p>

<h2>manifest语法</h2>

<p>先看一个例子<a href="http://www.w3.org/TR/2011/WD-html5-20110525/offline.html#introduction-4">w3.org</a>上提供的例子吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- clock.html --&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE HTML&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">manifest=</span><span class="s">&quot;clock.appcache&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Clock<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;clock.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;clock.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;/head&gt;</span>
</span><span class='line'> <span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>The time is: <span class="nt">&lt;output</span> <span class="na">id=</span><span class="s">&quot;clock&quot;</span><span class="nt">&gt;&lt;/output&gt;&lt;/p&gt;</span>
</span><span class='line'> <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span><span class='line'>/* clock.css */
</span><span class='line'>output { font: 2em sans-serif; }
</span><span class='line'>/* clock.js */
</span><span class='line'>setTimeout(function () {
</span><span class='line'>    document.getElementById(&#39;clock&#39;).value = new Date();
</span><span class='line'>}, 1000);
</span></code></pre></td></tr></table></div></figure>


<p>其中的manifest文件<code>clock.appcache</code>内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>ACHE MANIFEST
</span><span class='line'>clock.html
</span><span class='line'>clock.css
</span><span class='line'>clock.js
</span></code></pre></td></tr></table></div></figure>


<p>运行这个例子，除了第一次是正常的200请求外，此后观察网络，你会发现，不管你怎么强刷页面，都是直接<strong>from cache</strong>！</p>

<p><img src="http://neekey.github.com/images/posts/manifest-example.png" alt="manifest-example" /></p>

<p>下面我们简单介绍一下manifest的语法</p>

<ul>
<li>必须以<code>CACHE MANIFEST</code>作为第一行出现，任何不符合这条规则的manifest都会被浏览器忽略</li>
<li>使用 # 作为注释，比如</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'># 我是注释君
</span><span class='line'>  # 我是前面有空格的注释君
</span></code></pre></td></tr></table></div></figure>


<p>不过一行中只能有注释，注释和内容不能在同一行中。</p>

<ul>
<li><code>CACHE:</code> 作为标示符，用来表示该行下方的内容都是需要缓存的文件</li>
</ul>


<p>下面的文件列表，每一行一个文件，文件可以是相对路径（相对该manifest文件），也可以是绝对路径，如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>CACHE:
</span><span class='line'>index.css
</span><span class='line'>http://demos/index/assets/js/index.js
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>NETWORK:</code> 作为标示符，用来表明该行下面的内容都不走缓存，都请求网络</li>
</ul>


<p>和<code>CACHE</code>的写法一样，不过<strong>NETWORK</strong>支持通配符<code>*</code>，但是不支持包含路径的同配…</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>NETWORK:
</span><span class='line'>#将匹配所有的资源
</span><span class='line'>*
</span><span class='line'>#下面的无效
</span><span class='line'>assets/*
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>FALLBACK:</code> 作为标示符，用来表明该行下面的内容都是<code>fallback</code>的内容</li>
</ul>


<p>该列表用来指定，如果一个资源请求失败，则请求另一个资源，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>FALLBACK:
</span><span class='line'>noexists.css clock.css
</span></code></pre></td></tr></table></div></figure>


<p>这个功能非常神奇，至少从<code>网络</code>这块来看似乎是无缝的，看chrome控制台截图：</p>

<p><img src="http://neekey.github.com/images/posts/manifest-fallback.png" alt="manifest" /></p>

<h2>如何更新缓存？</h2>

<p>缓存到本地，速度是快了，没网也能用，那要更新文件怎么办？</p>

<p><strong>更新manifest文件!</strong></p>

<p>每次浏览器都会去先去检查manifest是否有更新，如果有更新，就会重新请求列表中的所有<code>CACHE</code>文件，并替换掉本地的缓存。</p>

<p>注意，在修改了manifest之后，页面第一次访问的时候，虽然浏览器会重新请求<code>CACHE</code>列表中的文件，但是页面上使用的脚本和样式以及图片等将还是原有的，到第二次访问的时候才会是新的。</p>

<p>为什么呢？我的理解是，页面上的资源请求和manifest的请求是并发的，因此第一次访问，页面上的资源（那些被缓存的）还是会按照原来去读本地的缓存，而此时新版本的资源还没到位，还来不及替换浏览器中保留的旧版本的资源。</p>

<h2>浏览器处理manifest的过程</h2>

<p>下面内容直接翻译自官方<a href="http://www.w3.org/TR/2011/WD-html5-20110525/offline.html#appcacheevents">Event Summary</a>，markdown不支持表格，排版上有点蛋疼，大家将就着看吧：</p>

<ul>
<li>checking: 浏览器检查manifest是否有更新，或者是第一次请求。</li>
<li>noupdate: 如果manifest没有改变，则<strong>结束</strong></li>
<li>downloading: 浏览器发现了manifest的改变后者在下载manifest中罗列的资源</li>
<li>progress: 浏览器在下载manifest中罗列的资源</li>
<li>cached: manifest中罗列的资源已经下载完毕，并被缓存完毕</li>
<li>updateready: manifest中罗列的资源均为重新下载，此时可以使用JavaScript使用<code>window.applicationCache.swapCache()</code>将缓存切换到最新的状态，整个过程<strong>结束</strong></li>
<li>obsolete: manifest请求返回了<code>404</code>或者<code>410</code>，则本地缓存将被<strong>删除</strong>，整个过程<strong>结束</strong></li>
<li>error: 好吧… 反正就是出错了，整个过程<strong>结束</strong></li>
</ul>


<h2>浏览器兼容器</h2>

<p>Chrome / Safari / Firefox / Opera</p>

<p>IE9表示不支持</p>

<h2>存在的一些问题和注意点</h2>

<h3>页面文件本身会被缓存!</h3>

<p>是的，不只是是默认，是会一直被缓存，即使你把页面文件放到<code>NETWORK</code>下面去,还是会被缓存… 悲剧，这个需要再研究下，有没有好的解决方案。</p>

<h3>将文件从<code>CACHE</code>中删除出错</h3>

<p>文件从<code>CACHE</code>中删除出错后，你会发现浏览器无论如何都请求不到这些资源了… 直接显示的是fail… 解决方案是将这些文件添加到<code>NETWORK</code>列表中</p>

<h3>跨域</h3>

<p>这个地方没细究，不过在FALLBACK中，替代方案的连接如果被替换的资源不在同一个域中，就会失败…</p>

<h2>小小地总结一下</h2>

<p>总体上来说，manifest是个好东西，想想一下全站资源都被缓存到，对与性能的提升就知道了，但是如上面所述如果要应用到实际环境中，还是有很多问题，另外还有很多细节也还需要调研清楚。</p>

<p>总体来说，觉得这个东西<strong>安装上去后不好卸下</strong>，请慎用。</p>

<p><em>这篇文章毕竟是<strong>小试</strong>，其实关于manifest还有很多细节（比如manifest中罗列出资源会不会影响第一次的资源请求顺序）需要验证和研究，以后的文章中继续补充</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于利用HTTP 1.1的Chunked encoding进行前端性能优化的调研]]></title>
    <link href="http://neekey.github.com/blog/2012/04/21/guan-yu-li-yong-http-1-dot-1de-chunked-encodingjin-xing-qian-duan-xing-neng-you-hua-de-diao-yan/"/>
    <updated>2012-04-21T15:52:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/04/21/guan-yu-li-yong-http-1-dot-1de-chunked-encodingjin-xing-qian-duan-xing-neng-you-hua-de-diao-yan</id>
    <content type="html"><![CDATA[<p><img src="http://neekey.github.com/images/posts/httpChunkEncoding.png" alt="Http/1.1 Chunked Encoding" /></p>

<h3>什么是chunked encoding？</h3>

<p>可以翻译为分块编码，是一种HTTP/1.1中定义的服务器向客户端发送数据时，对消息体的编码方式。它是服务器的请求响应Headers中<code>Transfer-Encoding</code>字段的值之一。</p>

<h4>Transfer Encoding</h4>

<p>该字段表明了对于返回的消息体使用何种编码以保证消息在发送者和接受者之间的安全传输。该字段与<code>Content-Coding</code>的区别在于该字段应用于消息体，而不是响应实体对象。</p>

<!--more-->


<p>该字段的的基本格式：</p>

<p><code>"Transfer-Encoding" ":" 1#transfer-coding</code></p>

<p>注意，许多HTTP/1.0应用无法接受该字段。</p>

<h4>Transfer Coding</h4>

<p><code>transfer-coding</code>便是<code>Transfer-Encoding</code>字段的值，同时在请求Header字段中也可以作为字段<code>TE</code>的值，以表明客户端可以接收的编码。所有的<code>transfer-coding</code>都对大小写不敏感。</p>

<p>无论通过<code>transfer-coding</code>指定给消息体的编码是什么，在编码集合中，最后一个值必须为<code>chunked</code>，且该编码只能出现一次。</p>

<p><code>transfer-coding</code>可用的选项有：<code>chunked</code>,<code>identity</code>,<code>gzip</code>,<code>compress</code>以及<code>deflate</code></p>

<h4>Chunked Transfer Coding</h4>

<p>分块编码将消息体按照顺序分割成一个块序列。每一个块都由<code>大小指示器</code>（size indicator），块数据以及紧跟其后的一个可选的包含实体头域的尾部（trailer）组成。这允许发送端能动态生成内容，并能携带有用的信息，这些信息能让接收者判断消息是否接收完整。</p>

<p>大小指示器是用16 进制数字字符串。块编码（chunked encoding）以任一大小为0的块结束，紧接着是尾部（trailer），尾部以一个空行终止。</p>

<p>可以具体看一个例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Type: text/plain
</span><span class='line'>Transfer-Encoding: chunked
</span><span class='line'>
</span><span class='line'>25
</span><span class='line'>This is the data in the first chunk
</span><span class='line'>
</span><span class='line'>1C
</span><span class='line'>and this is the second one
</span><span class='line'>
</span><span class='line'>3
</span><span class='line'>con
</span><span class='line'>8
</span><span class='line'>sequence
</span><span class='line'>0</span></code></pre></td></tr></table></div></figure>


<p>可以通过计算确认每一个chunk的size是否正确：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"This is the data in the first chunk\r\n"      (37 chars =&gt; hex: 0x25)
</span><span class='line'>"and this is the second one\r\n"               (28 chars =&gt; hex: 0x1C)
</span><span class='line'>"con"                                          (3  chars =&gt; hex: 0x03)
</span><span class='line'>"sequence"                                     (8  chars =&gt; hex: 0x08)</span></code></pre></td></tr></table></div></figure>


<h3>分段对脚本执行的影响</h3>

<h4>一个引子</h4>

<p>我们来看一段简单的代码</p>

<p>下面为<code>simple.php</code>文件的一个片段</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;A&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">+=</span> <span class="s1">&#39;--scriptA&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">+=</span> <span class="s1">&#39;--emitByScriptA&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;B&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">+=</span> <span class="s1">&#39;--scriptB&#39;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行一下，不出错料，hash值显示为：</p>

<p><code>--scriptA--scriptB--emitByScriptA</code></p>

<p>现在我们做一下修改，使用php的<code>flush</code>方法来进行<code>chunk</code>的处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;A&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">+=</span> <span class="s1">&#39;--scriptA&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">+=</span> <span class="s1">&#39;--emitByScriptA&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="nx">flush</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">sleep</span><span class="p">(</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'><span class="o">?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;B&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">+=</span> <span class="s1">&#39;--scriptB&#39;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的话，内容将被分为两段（要验证这一点，可以利用调试工具查看返回的header中是否有<code>Transfer-Encoding: chunked</code>, 并用<a href="http://fiddler2.com/fiddler2/">fiddler</a>等工具查看返回的raw数据，是否符合上面的<code>chunk</code>格式）。运行，hash值显示为：</p>

<p><code>--scriptA--emitByScriptA--scriptB</code></p>

<p><strong>emitByScriptA</strong>提前执行了！好像chunk的原因导致上面的代码提前执行了的样子！</p>

<p>要解释上面的现象，我们还需要继续做实验，并深入理解JavaScript的<strong>执行</strong>和浏览器<strong>加载</strong>的关系</p>

<h4>请耐心看完下面的测试</h4>

<p>细心的读者可能已经注意到了上面的第二个例子中，在flush后家了一个sleep方法，那我们现在把sleep方法去掉，只保留flush方法，重新执行，你会发现和第一个例子一样：</p>

<p><code>--scriptA--scriptB--emitByScriptA</code></p>

<p>好吧，那我们把flush方法去掉，只留下sleep方法，看看会发生什么：</p>

<p><code>--scriptA--emitByScriptA--scriptB</code></p>

<p>只不过这一次由于没有flush，是先观察到明显的页面空白，然后所有脚本执行完毕。</p>

<p>那么看来，似乎chunk对于脚本的执行顺序没有本质上的影响。而执行结果顺序的区别，反而是sleep产生了影响！那么sleep的影响是什么？没错，是不同脚本块<strong>加载完成时间</strong>！</p>

<hr />

<p>继续看下面的测试！</p>

<p>接下来，我们准备了一个<strong>mass.php</strong>里面包含了大概1M左右的文本数据，然后去掉sleep，在flush后面引入该文件:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">flush();</span>
</span><span class='line'><span class="x">include &quot;mass.php&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行，观察到结果：</p>

<p><code>--scriptA--emitByScriptA--scriptB</code></p>

<p>发现和sleep的效果一致。</p>

<p>我们去掉flush,只剩下mass.php，现在的测试代码是这个样子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&lt;script id=&quot;A&quot;&gt;…&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">include</span> <span class="s2">&quot;mass.php&quot;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;script id=&quot;B&quot;&gt;..&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果还是一样：</p>

<p><code>--scriptA--emitByScriptA--scriptB</code></p>

<p>至此我们可以进一步证实了，脚本的执行顺序和chunk无关，和不同的独立的代码块的完成载入的时间有关系。</p>

<p>而从上面的几个例子中均可以看到的是，JavaScript脚本是一边加载一边解析，一边执行的。</p>

<p><strong>我们继续测试！</strong></p>

<p>相信会有人对下面的这段代码的执行情况感到好奇：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">output</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">output</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;output&#39;</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果是JavaScript会报错，提示<code>output</code>未定义。</p>

<p>在做这个调研之前，我对于JavaScript脚本可以一边加载一边执行的困惑有很多。其中一点就是像上面的这个例子一样的问题：如果页面中尚未加载的部分定义了一些东西（比如全局变量，方法），而上面已经加载的脚本需要这个东西，那怎么执行？而显然，浏览器已经提供了一种机制，可以不用管下方的JavaScript代码块，而直接执行。</p>

<p>我们可以把每个script标签（不管是页面内脚本，还是外部引入的脚本）看做一个互相独立的闭包，只是相对我们在一个文件中写的多个闭包的关系，这些闭包的执行是以此被抛进JavaScript执行线程队列的，且这些闭包的上下文都是Global（window）</p>

<p>有了上面这个结论，我们再看一个例子，如果在script的中间部分chunk会怎么样？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    var beginDate = Date.now();</span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;?php</span> <span class="nb">flush</span><span class="p">();</span> <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">    document.location.hash += &#39;---scriptSleepfor: &#39; + ( Date.now() -  beginDate );</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果是 <strong>0</strong>，说明，虽然js可以一遍加载一般执行，但是js可执行的最小单元是一个script，只有一个script快被完全加载完毕且解析完毕后，其中的代码才会执行。</p>

<h3>总结一下关于js执行的几个结论</h3>

<ul>
<li>页面中的script标签是独立解析的执行的，因此一个script标签的解析不依赖其他script标签，换句话说，只要一个完整的解析单元完成，且上一个可以被执行的脚本已经执行完毕，这个单元应该就是可以执行的 &#8212;> 此处想要说明，即使页面下方还有很多脚本（script类型的）尚未加载，已经加载且完整的script也是可以执行的</li>
<li>不同的script的执行（假设他们的加载和解析非常连贯）可以理解为顺序且间隔极小（至少小于setTimeout=0的情况）并依次抛入js线程队列中。这个结论来自于，当直接flush之后，setTimeout出的方法并未在下一个script之前执行，但是添加了sleep或者下一个chunk的长度特别大（导致加载时间比较长）的情况下，却会导致setTimeout在下一个script之前执行。可以理解为setTimeout是作为第一个script后第一个抛入线程的js脚本块，因此先执行了。</li>
<li>JavaScript的执行是一边加载一边解析一边执行的，JavaScript执行的最小单元为一个script，只有该script被完全加载完毕，并解析完成后，才会执行。</li>
<li>理解各自独立的script块：可以将每个script块理解为一个个会按照循序执行的闭包，特点在于他们都公用一个上下文（ this -> global -> window ）</li>
</ul>


<h4>那么chunk是否能对前端性能进行优化？</h4>

<p>根据上面对于js执行的一些总结，其实chunk对于js的提前执行或者加载没有太大的影响。唯一可以优化的场景是：</p>

<p>一个动态页面，其在响应请求时的总体计算时间比较长，但是它可以先将部分结果通过chunk的方式提前响应，这样提前响应的部分会预先被浏览器解析其中完整的JavaScript在加载完毕后也将被提早执行。</p>

<hr />

<p>最后在补充点课外知识：</p>

<h4>动态页面一般会自动做分段处理(比如Apache)</h4>

<ul>
<li>动态文件（比如PHP），在内容很少的情况下，也没有出现chunked标识，在header中存在content-length字段</li>
<li>在内容很多的时候出现了即使没有调用flush方法，也出现了chunked标识，且结尾标识也符合chunked规则（结尾为0以表示结束）</li>
<li>在php文件中，使用flush方法，可以看到预期的标识位置</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浏览器缓存和304小结]]></title>
    <link href="http://neekey.github.com/blog/2012/04/14/liu-lan-qi-huan-cun-he-304xiao-jie/"/>
    <updated>2012-04-14T15:06:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/04/14/liu-lan-qi-huan-cun-he-304xiao-jie</id>
    <content type="html"><![CDATA[<p><img src="http://neekey.github.com/images/posts/browser-cache304.png" alt="browser-cache" /></p>

<p>昨天有网友在询问关于浏览器缓存的问题，只记得以前写PHP的时候，自己简单地写过Etag的304方式，倒是没有认真看过浏览器本地缓存和304的区别，今天做了一些资料查询和测试，总结一下。</p>

<!--more-->


<h3>关于浏览器缓存</h3>

<p>浏览器的资源请求，如果使用了缓存基本上是两种情况</p>

<ul>
<li>status code: 200 ok ( from cache )</li>
<li>status code: 304 Not Modified</li>
</ul>


<p><img src="http://neekey.github.com/images/posts/browser-cache304-200.png" alt="browser-cache" /></p>

<p><img src="http://neekey.github.com/images/posts/browser-cache304-304.png" alt="browser-cache" /></p>

<p>上面两种方式有什么区别呢？简单地说，第一种方式是不向浏览器发送请求，直接使用本地缓存文件。第二种方式，浏览器虽然发现了本地有该资源的缓存，但是不确定是否是最新的，于是想服务器询问，若服务器认为浏览器的缓存版本还可用，那么便会返回304。</p>

<h3>浏览器关于缓存使用的决策</h3>

<p>那么，浏览器如何决定是使用哪种方式呢？这就和服务器在请求返回中的Header字段有关了。下面对相关的字段进行简单介绍。</p>

<h4>Cache-Control</h4>

<p>Cache-Control 是最重要的规则。这个字段用于指定所有缓存机制在整个请求/响应链中必须服从的指令。该字段通常覆盖默认缓存算法。另外，缓存指令是单向的，即请求中存在一个指令并不意味着响应中将存在同一个指令。</p>

<p>简单地说，该字段用于控制浏览器在什么情况下直接使用本地缓存而不向服务器发送请求。一般具有以下值：</p>

<ul>
<li><code>public</code>: 所有内容都将被缓存</li>
<li><code>private</code>: 内容只缓存到似有缓存中</li>
<li><code>no-cache</code>: 所有内容都不会被缓存</li>
<li><code>no-store</code>: 所有内容都不会被缓存到缓存或者internet临时文件中</li>
<li><code>must-revalidation/proxy-revalidation</code>: 如果缓存的内容失效，请求必须发送到服务器/代理以进行重新验证</li>
<li><code>max-age=xxx( xxx is numeric )</code>: 缓存的内容将在 xxx 秒后失效, 这个选项只在HTTP 1.1可用, 并如果和Last-Modified一起使用时, 优先级较高</li>
</ul>


<p>其中最常用的属性便是 <code>max-age</code>, 这个字段很简单，就是浏览器在资源成功请求后的制定时间内，都将直接调用本地缓存和不会向服务器去请求数据。</p>

<h4>Expires</h4>

<p>Expires 头部字段提供一个日期和时间，在该日期前的所有对该资源的请求都会直接使用浏览器缓存而不用向服务器请求（注意：cache-control max-age 和 s-maxage 将覆盖 Expires 头部。）</p>

<p>Expires 字段接收以下格式的值：“Expires: Sun, 08 Nov 2009 03:37:26 GMT”。</p>

<p>但是使用<code>Expires</code>存在服务器端时间和浏览器时间不一致的问题。</p>

<h4>Last-Modified/E-tag</h4>

<p><code>Last-Modified</code>和<code>E-tag</code>的作用都是向服务器确认当前缓存文件是否为最新。抛开功能不看，这两个字段的表现如下：</p>

<ul>
<li>若服务器在响应一个资源时添加了<code>Last-Modified</code>字段，那么当下一次浏览器再一次向服务器请求该资源时（前提是浏览器中上一次的资源被缓存过了），会在请求header中包含<code>If-Modified-Since</code>字段，且值与服务器第一次响应给浏览器的<code>Last-Modified</code>字段一致</li>
<li>若服务器在响应一个资源时添加了<code>ETag</code>字段，那么当下一次浏览器再一次向服务器请求该资源时（前提是浏览器中上一次的资源被缓存过了），会在请求header中包含<code>If-None-Match</code>字段，且值与服务器第一次响应给浏览器的<code>ETag</code>字段一致</li>
</ul>


<p>那么上述是遵循了Http协议的浏览器会自动实现的，而要实现304的功能，就需要服务器（比如Apache对于静态资源会自动实现这两个字段的响应）或者我们手动在服务器端编写响应的逻辑来实现。</p>

<ul>
<li>若服务器在收到的资源请求中发现含有<code>Last-Modified</code>字段，则说明浏览器中包含了该资源的某一版本的缓存，此时服务器端将根据该字段的值进行一定的逻辑判断，以决定让浏览器直接使用已有的缓存（返回<code>304</code>）还是将最新的文件发送过去（<code>200</code>，发送新文件并更新<code>Last-Modified</code>字段）</li>
<li>若服务器在收到的资源请求中发现含有<code>If-None-Matc</code>字段，则说明浏览器中包含了该资源的某一版本的缓存，此时服务器端将根据该字段的值进行一定的逻辑判断，以决定让浏览器直接使用已有的缓存（返回<code>304</code>）还是将最新的文件发送过去（<code>200</code>，发送新文件，并更新<code>ETag</code>）</li>
</ul>


<p>若同时使用了<code>Last-Modified</code>和<code>ETag</code>，正确的做法应该是当两者都符合条件时，才返回<code>304</code></p>

<h5>什么时候使用ETag？</h5>

<p><code>Etag</code> 主要为了解决 <code>Last-Modified</code> 无法解决的一些问题。</p>

<ul>
<li>一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET。这种情况下可以将某个能用来表明文件内容是否被更改的值（比如<code>md5</code>）来作为<code>ETag</code></li>
<li>某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，<code>If-Modified-Since</code>能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)</li>
<li>某些服务器不能精确的得到文件的最后修改时间</li>
</ul>


<h3>不同的页面打开方式产生的请求区别</h3>

<p>一般我们打开（或者更新）一个页面（或者资源）有几种方式：</p>

<ul>
<li>在地址栏中输入地址，然后回车</li>
<li>激活当前页面地址，然后回车</li>
<li>F5刷新页面</li>
<li>单机Back/Forward按钮</li>
</ul>


<p>上面几种方式对资源的请求，会产生不同的结果，并且各浏览器的表现并不一致。具体的区别可以参考鸟哥的《<a href="http://www.laruence.com/2010/03/05/1332.html?cp=2#comment-6618">浏览器缓存机制</a>》</p>

<p>其中大家需要注意的一点是，刷新页面（F5或者刷新按钮），不管是否设置了<code>max-age</code>，都会重新像服务器发送请求。但是这不影响<code>304</code>逻辑。</p>

<h3>实例代码测试</h3>

<p>用<code>nodejs</code>写了一个简单的静态文件服务器，用来测试上面的<code>Cache-Control</code>和<code>Last-Modified</code>，具体代码可以看<a href="https://gist.github.com/2382491"><code>gist</code></a></p>

<p>例子比较简单，大体逻辑：</p>

<ul>
<li>每个资源的<code>200</code>返回设置<code>max-age=10</code>，即缓存10秒。同时设置<code>Last-Modified</code></li>
<li>每次收到请求后，若发现包含<code>if-modified-since</code>字段，则<code>304</code></li>
</ul>


<p>测试过程和结果：</p>

<ul>
<li>第一次请求，不管是<code>index.html</code>还是<code>index.css</code>均为<code>200</code>，且response中包含了<code>max-age</code>和<code>Last-Modified</code></li>
<li>在地址栏中回车（10s以内），<code>index.html</code>为<code>304</code>，<code>index.css</code>为<code>200 ok ( from cache )</code></li>
<li>若对页面进行刷新（ F5或者刷新页面 ），两者均为 <code>304</code>（在10s内或者不在10s内）</li>
</ul>


<p>需要注意的问题：</p>

<ul>
<li><code>index.html</code>不管是否设置了<code>max-age</code>，都是<code>304</code>，同理，将<code>index.css</code>直接放到地址栏中请求也是<code>304</code></li>
<li><code>index.css</code>一次<code>304</code>之后的10s内又能继续进行不需要请求服务器的直接本地缓存。这里我个人认为，浏览器的“<strong>直接使用本地缓存</strong>“的效果和从服务器成功<code>200</code>到数据产生的效果是一致的，除了文件本身，header字段等信息也是同样会被cache的，因此<code>304</code>之后，<code>max-age</code>又可以被继续使用一遍。</li>
</ul>


<hr />

<p>做了<code>nodejs</code>的实验之后，又开启了<code>apache</code>服务器，同样的将<code>index.html</code>和i<code>ndex.css</code>文件放置到服务器根目录中，请求后，发现<code>apache</code>默认已经做了<code>Last-Modified</code>和<code>ETag</code>的处理，并且在修改<code>index.css</code>文件后，可以观察到这两个值的变化。</p>

<p><img src="http://neekey.github.com/images/posts/browser-cache304-apache.png" alt="browser-cache" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下使用goagent进行翻墙]]></title>
    <link href="http://neekey.github.com/blog/2012/04/12/macxia-shi-yong-goagentjin-xing-fan-qiang/"/>
    <updated>2012-04-12T16:40:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/04/12/macxia-shi-yong-goagentjin-xing-fan-qiang</id>
    <content type="html"><![CDATA[<p><img src="http://neekey.github.com/images/posts/goagent.png" alt="goagent" /></p>

<p>这两天花钱买的SSH账号各种不给力，要么连接不上，要么频频掉线。无奈，想起同事<strong>@渐飞</strong>有一次在分享的免费翻墙利器goagent，于是便尝试了下。基本可用，本文简单介绍一下goagent在mac下的使用。</p>

<h3>goagent是什么</h3>

<p>goagent是使用Python和Google Appengine SDK编写的网络软件，可以运行在Windows/Mac/Linux/Android/iTouch/iPhone/iPad/webOS/OpenWRT/Maemo上。</p>

<!--more-->


<h3>安装和部署</h3>

<ul>
<li>申请<a href="https://appengine.google.com/start">Google Appengine</a>并创建app。在创建App的时候会让你自定义一个appliction identifier 这个便是下面需要用到的appid</li>
</ul>


<p><img src="http://neekey.github.com/images/posts/goagent-newapp.png" alt="newapp" /></p>

<p><img src="http://neekey.github.com/images/posts/goagent-appid.png" alt="appid" /></p>

<ul>
<li>进入goagent的<a href="http://code.google.com/p/goagent/">首页</a>（本身已经提供了非常清楚的教程）</li>
<li>下载稳定版的goagent，解压后放在你自己希望放的位置</li>
<li>配置：修改<code>local\proxy.ini</code>中的<code>[gae]</code>下的<code>appid=你的appid</code>(多appid请用|隔开)</li>
<li>部署：进行server目录，执行 <code>python uploader.zip</code> 进行应用的部署，过程中会提示你输入你的google账号和密码，之后会不断检查部署是否成功，成功部署后会提示<code>Deployment successful</code></li>
<li>运行goagent：进入local目录，执行<code>python proxy.py</code>就可以了。</li>
<li>添加证书：添加local/CA.crt和local/certs/下的所有证书</li>
</ul>


<p><img src="http://neekey.github.com/images/posts/goagent-cert.png" alt="goagent" /></p>

<ul>
<li>chrome请安装<a href="https://chrome.google.com/webstore/detail/dpplabbmogkhghncfbfdeeokoefdjegm">SwitchySharp</a>插件，然后导入这个设置<a href="http://goagent.googlecode.com/files/SwitchyOptions.bak">http://goagent.googlecode.com/files/SwitchyOptions.bak</a>，firefox请安装AutoProxy</li>
</ul>


<h3>设置快速启动</h3>

<p>这方面我比较笨，一般我都是设置<code>alias</code>来达到一个命令启动翻墙的功能。</p>

<p>假设我的goagent在<code>/users/neekey/goagent/</code>目录下，那么打开<code>.bath_profile</code></p>

<p><code>mate ~/.bath_profile</code></p>

<p>添加命令</p>

<pre><code>#goagent
alias goagent="python /users/neekey/goagent/local/proxy.py"
</code></pre>

<p>以后就可以在终端中直接通过<code>goagent</code>命令来启动了</p>

<h3>与SSH的比较</h3>

<p>与SSH相比，速度上差不多（当然这个和每个人用的SSH服务器有关），不过比SSH肯定更加方便（我每次都是用在终端中输入命令的形式连接ssh，因此每次都要输入一遍密码）。不过goagent的好处还是<strong>绿色，免费!!</strong>，并且相比来说会更加稳定（不过这个要看google了=.=）</p>

<p>试用中，以后有想法会继续更新。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium - Web自动化测试工具 试用]]></title>
    <link href="http://neekey.github.com/blog/2012/03/24/selenium-webzi-dong-hua-ce-shi-gong-ju-shi-yong/"/>
    <updated>2012-03-24T19:33:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/03/24/selenium-webzi-dong-hua-ce-shi-gong-ju-shi-yong</id>
    <content type="html"><![CDATA[<p><img src="http://neekey.github.com/images/posts/selenium-logo.png" alt="Selenium" /></p>

<h2>什么是Selenium</h2>

<p>Selenium是一个web自动化测试工具集。它提供了多种工具来辅助自动化测试的进行。整个完整的套件提供了web应用测试需要的各种部件，并提供了非常灵活和丰富的配置，允许进行本地UI测试以及对期望值与应用的实际表现进行比较。</p>

<p>Selenim最大的优势是它能支持几乎所有的浏览器平台（包括移动web）</p>

<!--more-->


<h2>Selenium简史</h2>

<p>Selenium最早在2004年，由ThoughtWorks公司的一位名为Jason Huggins的员工开发的。后来他开发的这个部分成为了Selenium的核心，最终成为Selenium Remote Control（RC）和Selenium IDE的基础。由于可以用可选的语言来对浏览器进行控制，Selenium在当时成为一个巨大的突破。</p>

<p>尽管如此，Selenium还是有很大的缺点。由于它的自动化测试引擎是基于Javascript，而浏览器在安全性方面对Javascript有很多限制，因此很多行为无法在测试中被执行。</p>

<p>在2006年，一位来自Google的名为Simon Stewart的大胆的工程师开启了一个名为WebDriver的项目。Google在很长一段时间曾是Selenium的大客户之一，但是测试人员不得不上被上述的安全性所限制。因此Simon希望能开发出一个工具，可以直接和浏览器进行“对话”，并可以直接使用浏览器和操作系统的“本地”接口。这样就避免了Javascript在沙箱中执行所带来的各种限制。</p>

<p>2008年，除了北京2008奥运会和金融危机外，或许最重要的事情就是Selenium和WebDriver的合并了。</p>

<h2>Selenium测试简单原理</h2>

<p>以下仅为个人理解，以后会更新</p>

<p>一个最简单的Selenium工具，应该有以下几部分构成：
* Selenium Server： 用来解析测试脚本，并和webDriver进行通信
* WebDriver： Driver顾名思义是一个驱动，或者说就是一层接口的封装。WebDriver作为Server和browser的连接人。它接受server传来的命令，然后控制浏览器的行为。同时将浏览器中的信息反馈到server中。WebDriver一般会以浏览器的插件形式存在。每个浏览器都会对应一个自己的webDriver。
* 测试脚本： 测试行为的具体编码。Selenium支持很多中语言，比如Java，PHP，Ruby等等，出了官方支持外，也有很多第三方开发人员编写的实现。本文中的实践将使用github上的nodeJS实现（<a href="https://github.com/Camme/webdriverjs">webDriverJS</a>）</p>

<h2>部署Selenium</h2>

<h3>Server</h3>

<p>从官网上下载server的jar文件 <a href="http://seleniumhq.org/download/">download</a></p>

<p>直接运行该jar文件，变开启了server</p>

<p><code>java -jar selenium-server-standalone-2.20.0.jar</code></p>

<h3>WebDriver</h3>

<p>上面的Selenium简史中介绍过，webDriver和Selenium在08年已经合并，因此大部分浏览器的WebDriver都是由Selenium来维护，因此不需要下载和安装额外的webDriver，一般server那边的运行的时候会直接安装或者附带了。</p>

<p>不过Chrome的webDriver：ChromeDriver是由Google团队自己维护，因此如果需要对chrome进行调试，需要下载ChromeDriver，并为server指定ChromeDriver的路径：</p>

<p><code>java -jar selenium-server-standalone-2.20.0.jar -Dwebdriver.chrome.path=PATH_TO_CHROME_DRIVER</code></p>

<h3>测试脚本</h3>

<p>使用一种你喜欢的语言来编写测试用例，然后执行它！</p>

<p>这边要说明一下测试脚本和Server之间的关系。</p>

<p>实际上测试脚本执行后和Server是一种通信关系，而它们通过Restful的方式进行通信。在开启server后，我们可以看到控制台中有一句这样的说明：</p>

<p><code>228 [main] INFO org.openqa.selenium.server.SeleniumServer - RemoteWebDriver instances should connect to: http://127.94.0.1:4444/wd/hub</code></p>

<p>说明我们在测试脚本中，要做的第一件事情就是产生一个RemoteWebDriver的实例，然后通过这个实例对象和Server进行通信。并且利用Restful的方式进行通信。为什么说是用Restful的方式，下文会做说明。</p>

<h2>编写我们的测试脚本</h2>

<p>本文使用nodeJS进行测试脚本的编写，使用了第三方的接口实现<a href="https://github.com/Camme/webdriverjs">webDriverJS</a>.</p>

<p>直接用npm安装</p>

<p><code>npm webdriverjs</code></p>

<p>然后新建一个js文件，输入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">webdriverjs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;webdriverjs&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">webdriverjs</span><span class="p">.</span><span class="nx">remote</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">desiredCapabilities</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>        <span class="nx">browserName</span><span class="o">:</span><span class="s2">&quot;chrome&quot;</span>
</span><span class='line'>    <span class="p">}});</span>
</span><span class='line'>  
</span><span class='line'><span class="nx">client</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">init</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">url</span><span class="p">(</span><span class="s2">&quot;http://www.google.com&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">getTitle</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">t</span><span class="p">)})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>然后用node执行这个文件，可以看到Chrome自动打开，然后打开Google主页，打开后一下子就关掉了。查看终端我们可以看到下面的结果:</p>

<p><img src="http://neekey.github.com/images/posts/selenium-code.png" alt="selenium-code" /></p>

<p>倒数第二行是我们在代码中log出来的页面的title。</p>

<p>回到刚刚的话题，我们看看为什么说是用Restful方式通信。</p>

<p>前面三行，是在向Server申请会话（session）。webDriver 对象发起了一个<code>/wd/hub/session</code>资源请求，并附上了会话的配置参数，然后server返回会话的<code>id</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span><span class="mi">19</span><span class="o">:</span><span class="mi">13</span><span class="o">:</span><span class="mi">14</span><span class="p">]</span><span class="o">:</span>  <span class="nx">COMMAND</span>    <span class="nx">POST</span>     <span class="s2">&quot;/wd/hub/session&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">19</span><span class="o">:</span><span class="mi">13</span><span class="o">:</span><span class="mi">14</span><span class="p">]</span><span class="o">:</span>  <span class="nx">DATA</span>       <span class="p">{</span><span class="s2">&quot;desiredCapabilities&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;browserName&quot;</span><span class="o">:</span><span class="s2">&quot;chrome&quot;</span><span class="p">,</span><span class="s2">&quot;version&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;javascriptEnabled&quot;</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="s2">&quot;platform&quot;</span><span class="o">:</span><span class="s2">&quot;ANY&quot;</span><span class="p">},</span><span class="s2">&quot;sessionId&quot;</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span>
</span><span class='line'><span class="p">[</span><span class="mi">19</span><span class="o">:</span><span class="mi">13</span><span class="o">:</span><span class="mi">15</span><span class="p">]</span><span class="o">:</span>  <span class="nx">SET</span> <span class="nx">SESSION</span> <span class="nx">ID</span>     <span class="s2">&quot;1332585814526&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来请求打开指定的url,注意到请求的<code>uri</code>中包含了返回的会话<code>id</code>：<code>/wd/hub/session/1332585814526/url</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span><span class="mi">19</span><span class="o">:</span><span class="mi">13</span><span class="o">:</span><span class="mi">15</span><span class="p">]</span><span class="o">:</span>  <span class="nx">COMMAND</span>    <span class="nx">POST</span>     <span class="s2">&quot;/wd/hub/session/1332585814526/url&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">19</span><span class="o">:</span><span class="mi">13</span><span class="o">:</span><span class="mi">15</span><span class="p">]</span><span class="o">:</span>  <span class="nx">DATA</span>       <span class="p">{</span><span class="s2">&quot;url&quot;</span><span class="o">:</span><span class="s2">&quot;http://www.google.com&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后请求页面的title值，这是一个<code>GET</code>方式的请求，因此有<code>RESULT</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span><span class="mi">19</span><span class="o">:</span><span class="mi">13</span><span class="o">:</span><span class="mi">20</span><span class="p">]</span><span class="o">:</span>  <span class="nx">COMMAND</span>    <span class="nx">GET</span>      <span class="s2">&quot;/wd/hub/session/1332585814526/title&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">19</span><span class="o">:</span><span class="mi">13</span><span class="o">:</span><span class="mi">20</span><span class="p">]</span><span class="o">:</span>  <span class="nx">RESULT</span>         <span class="s2">&quot;Google&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，关闭页面，也就是<code>end()</code>，实例对象想Server发起了一个<code>DELETE</code>请求，删除对话。</p>

<p>那么说句题外话，其实对于Selenium的测试语言的实现本质上是<strong>对面向开发人员的接口到Selenium的Restful接口的封装</strong>。</p>

<h2>Selenium的优势</h2>

<ul>
<li>兼容性</li>
</ul>


<p>几乎支持所有浏览器（Selenium2 目前好像还不支持Sarari），包括IE6以及移动浏览器（Android和iOS）</p>

<ul>
<li>没有安全性以及沙盒限制</li>
</ul>


<p>之前有用过<code>jasmine</code>来进行前端代码测试，但是由于Javascript作为一段页面脚本在页面上执行，因此有很多限制，对于很多测试条件无法实现。比如无法跨域，那么父页面的测试代码要去对子页面的相关情况进行测试就会有很多问题。另外也无法跨页面执行代码，因为一旦页面刷新，所有代码都被刷新了。</p>

<p>由于Selenium2使用了webDriver，因此其脚本的执行是不受安全性沙盒限制的，因此上述的问题都不存在。</p>

<ul>
<li>可以用多种语言编写测试用例</li>
</ul>


<p>使用jasmine对前端页面进行测试，只能使用javascript，而selenium支持多种语言（JAVA，RUBY，PHP以及各种第三方的实现），因此其受众更广。</p>

<h2>最后附上自己制作的演示视频（勿喷呵呵）</h2>

<p><embed src='http://player.youku.com/player.php/sid/XMzcwNjQwMzI0/v.swf' quality='high' width='480' height='400' align='middle' allowScriptAccess='sameDomain' type='application/x-shockwave-flash'></embed></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浏览器渲染小实验]]></title>
    <link href="http://neekey.github.com/blog/2012/03/19/liu-lan-qi-xuan-ran-xiao-shi-yan/"/>
    <updated>2012-03-19T10:47:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/03/19/liu-lan-qi-xuan-ran-xiao-shi-yan</id>
    <content type="html"><![CDATA[<p>今天做了一个小实验，简单地研究下浏览器对于html的渲染</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;div&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;childDiv&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;a&quot;</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="nx">alert</span><span class="p">(</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span> <span class="s1">&#39;div&#39;</span> <span class="p">).</span><span class="nx">innerHTML</span> <span class="p">);</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="nx">alert</span><span class="p">(</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span> <span class="s1">&#39;div&#39;</span> <span class="p">).</span><span class="nx">innerHTML</span> <span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="s1">&#39;test&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">alert</span><span class="p">(</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span> <span class="s1">&#39;div&#39;</span> <span class="p">).</span><span class="nx">innerHTML</span> <span class="p">);</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我想要看一下当脚本在html还未闭合的情况下执行，浏览器会如何处理。下面是运行结果截图：</p>

<!--more-->


<p>第一个结果: 只显示了<code>childDiv</code>部分</p>

<p><img src="http://neekey.github.com/images/posts/browser_render1.png" alt="运行结果1" /></p>

<p>第二个结果: 比原来多了自己这段<code>script</code></p>

<p><img src="http://neekey.github.com/images/posts/browser_render2.png" alt="运行结果1" /></p>

<p>第三个结果: 终于完全显示出来了</p>

<p><img src="http://neekey.github.com/images/posts/browser_render3.png" alt="运行结果1" /></p>

<p>上面的结果表明了以下几点：</p>

<ul>
<li>浏览器会自动闭合html结构。虽然每个结果中，html的结构输出都是完整的，但是并不等于在<code>alert</code>时html都被解析完。比如第一个<code>script</code>中，其实<code>&lt;/a&gt;</code>，<code>&lt;/div&gt;</code>以及<code>childDiv</code>下方的html都还未被解析到，但是由于上面已经有了<code>&lt;div id="childDiv"&gt;</code>和<code>&lt;a id="a" href="#"&gt;</code>，因此浏览器自动闭合了。</li>
<li>脚本阻塞了渲染</li>
<li>脚本部分是真个载入后解析完毕再执行。从第二个<code>script</code>中可以看到，虽然在执行<code>alert</code>，但是下面的<code>var a = ..</code>已经被解析完毕了。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Semantic Versioning 语义化版本号]]></title>
    <link href="http://neekey.github.com/blog/2012/02/27/semantic-versioning/"/>
    <updated>2012-02-27T16:51:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/02/27/semantic-versioning</id>
    <content type="html"><![CDATA[<p><img src="http://neekey.github.com/images/posts/semanticVersion.png" alt="firefox版本号" /></p>

<p>今天在看<a href="http://www.commonjs.org/">commonJS</a>的<a href="http://wiki.commonjs.org/wiki/Packages/1.0">package</a>部分的时候，在讲到version字段的时候，建议参考<a href="http://semver.org/">Semantic Versioning</a>作为版本号的编写标准。仔细了解了下，对版本号的写法有了一些认识，翻译其中重要的部分分享下。</p>

<!--more-->


<h2>语义化版本号说明(SemVer)</h2>

<ul>
<li>使用语义化版本号的软件必须声明一个公共API。这个API可以在代码内部声明或者严格地写入文档中。不论如何，这个API必须是准确切让人用以理解的。</li>
<li>一个标准的版本号必须是<strong>X.Y.Z</strong>的形式，其中<strong>X,Y,Z</strong>都不能为负数。<strong>X</strong>是主版本，Y是副版本，Z是补丁版本。每个元素必须一次只能增加1.比如：<code>1.9.0 -&gt; 1.10.0 -&gt; 1.110</code></li>
<li>当一个主版本增加了，副版本和补丁版本必须被重置为0.当一个副版本增加，那么补丁版本必须被重置为0.比如：<code>1.1.3 -&gt; 2.00 和 2.1.7 -&gt; 2.2.0</code></li>
<li>一旦一个版本包被发布，那么这个版本的内容不能被更改。任何修改都必须重新发布一个版本。</li>
<li>主版本<strong>0</strong>（0.y.z）用于初始开发。在该阶段，任何时刻都可能发生改变。这个时候的公共API被认为是不稳固的。</li>
<li>在版本号<strong>1.0.0</strong>中定义公共API。接下版本号的改变都依赖于这个公共API的改变。</li>
<li>补丁版本号<strong>Z</strong>(x.y.Z | x > 0)必须只有在修复向下兼容的Bug时才会更新。Bug修复是指通过代码内部的修改来修正不正确的行为。</li>
<li>当向下兼容的功能被提出或者任何公共API被废弃的时候，副版本号<strong>Y</strong>(x.Y.z | x > 0 )必须被更新。当大量的新功能或者改进出现在私有代码里面，副版本号也可以更新。副版本号的更新可能包括补丁版本的更新内容。副版本号更新后，补丁版本号必须重置为0</li>
<li>当公共API出现了与向下兼容性有关的变更时，主版本号<strong>X</strong>(X.y.z | X > 0)必须被更新。它可能包含了副版本和补丁版本的变更内容。主版本更新后，副版本和补丁版本必须被重置为0</li>
<li>一个预发布的版本号可能使用在补丁版本号后面添加一个破折号和一系列的被点分割的标示符构成。这些标示符必须由ASCII码中的包含文字和数字的符号以及破折号组成[0-9A-Za-z-]。预发布版本的优先级比正常的版本号低。比如：<code>1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92</code></li>
<li>一个生成版本可能使用在补丁版本和预发布版本后面添加一个加号和一系列由破折号分隔的标示符组成。这些标示符必须由ASCII码中的包含文字和数字的符号以及破折号组成[0-9A-Za-z-]。生成版本的优先级比正常版本的优先级高</li>
<li>优先级必须通过将版本号根据主版本号，副版本号，补丁版本号，预发布版本号，生成版本号的顺序分割后进行计算。主版本，副版本，补丁版本总是通过数字大小进行比较。预发布版本和生成版本之间的比较必须通过被破折号分隔的标示符进行比较：只带有数字的版本号通过数字大小进行比较，带有字母的版本号则更具字符在ASCII表中的顺序比较优先级。数字标示符总是比非数字的标示符优先级低。比如：<code>1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0-rc.1 &lt; 1.0.0-rc.1+build.1 &lt; 1.0.0 &lt; 1.0.0+0.3.7 &lt; 1.3.7+build &lt; 1.3.7+build.2.b8f12d7 &lt; 1.3.7+build.11.e0f985a.
</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby学习笔记(一)]]></title>
    <link href="http://neekey.github.com/blog/2012/02/09/rubyxue-xi-bi-ji-1/"/>
    <updated>2012-02-09T22:18:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/02/09/rubyxue-xi-bi-ji-1</id>
    <content type="html"><![CDATA[<p><img src="http://neekey.github.com/images/posts/ruby_logo.gif" alt="ruby" /></p>

<p>今天…闲来无事，去看了一下<a href="http://www.ruby-lang.org">Ruby</a>,因为Octopress是用<a href="http://www.ruby-lang.org">Ruby</a>写的，有必要学习一下<a href="http://www.ruby-lang.org">Ruby</a>。</p>

<p>直接到官网上去，发现<a href="http://www.ruby-lang.org">Ruby</a>非常友好，最下方有中文版本的选择，不过感觉翻译的有点蹩脚，还是直接看英文吧。首页右边有常用的几个入口，比如<a href="http://www.ruby-lang.org/en/downloads/">下载</a>，<a href="http://www.ruby-lang.org/en/documentation/quickstart/">二十分钟学习ruby</a>，<a href="http://tryruby.org/">在浏览器里尝试Ruby</a>(这个页面非常有爱，见下图)</p>

<!--more-->


<p><img src="http://neekey.github.com/images/posts/try_ruby_in_browser.png" alt="ruby" /></p>

<p>很认真的花了20分钟看了<a href="http://www.ruby-lang.org/en/documentation/quickstart/">二十分钟学习ruby</a>，对<a href="http://www.ruby-lang.org">Ruby</a>算是有了一定的认识，总结一下：</p>

<h3><strong>Interactive Ruby</strong></h3>

<p>翻译成中文应该是可交互的<a href="http://www.ruby-lang.org">Ruby</a>，其实是可以让你在终端中执行ruby的程序，在Mac下直接在终端中输入<code>irb</code>就行了。然后尽情的尝试吧。</p>

<h3><strong>控制台信息输出</strong></h3>

<p>就是所谓的<code>print</code>之类的方法，在<a href="http://www.ruby-lang.org">Ruby</a>中是<code>puts</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="nb">puts</span> <span class="s2">&quot;hello world&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">hello</span> <span class="n">world</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>基本的简单语法</strong></h3>

<ul>
<li>nil: 指的是<a href="http://www.ruby-lang.org">Ruby</a>中的空值</li>
<li>简单的计算：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="mi">2</span><span class="o">+</span><span class="mi">3</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">2</span><span class="o">*</span><span class="mi">3</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>变量赋值：<a href="http://www.ruby-lang.org">Ruby</a>中的变量不需要声明</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;hello world&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nb">puts</span> <span class="n">a</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">hello</span> <span class="n">world</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>调用方法: 调用方法和传参的方式比较随意，下面几种都可以。如果方法不需要参数，则括号可加可不加。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">3</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span> <span class="mi">9</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>字符串只能用双引号</strong></li>
</ul>


<h3><strong>定义方法</strong></h3>

<p>先看例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span><span class="k">def</span> <span class="nf">h</span> <span class="p">(</span> <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;world&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span><span class="nb">puts</span> <span class="s2">&quot;hello </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="o">&gt;</span><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的例子定义了一个叫<code>h</code>的方法，该方法输出<code>hello world</code>。用<code>def</code>来表示一个方法定义的开始，<code>end</code>来表示定义的结束。其中<code>hello #{name}</code>和js中的模板引擎语法类似，其中的name可以调用自己的方法，比如需要让输出首字母大写，可以修改为<code>hello #{name.capitalize}</code></p>

<h3><strong>类</strong></h3>

<h4>类的定义</h4>

<p>先看例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Greeter</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span> <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;world&quot;</span> <span class="p">)</span>
</span><span class='line'>      <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say_hi</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Hi </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say_bye</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Bye </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>类的定义由<code>class</code>关键字来声明，然后在<code>end</code>之前可以定义各种方法。上面的例子中<code>initialize</code>为构造函数，<code>@name</code>为定义的私有属性。注意到类中的方法都可以直接利用<code>@name</code>来访问该属性。</p>

<h4>实例化</h4>

<p>结合上面的代码和下面的代码，可知<code>name</code>无法直接访问，下面的例子由于访问<code>name</code>而报错：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">g</span> <span class="o">=</span> <span class="no">Greeter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="s2">&quot;neekey&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">say_hi</span><span class="p">()</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Hi</span> <span class="n">neekey</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="no">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`name&#39; for…</span>
</span></code></pre></td></tr></table></div></figure>


<h4>判断类实例是否具有某方法</h4>

<p>其实<code>class</code>定义的类本身已经继承了很多方法，我们可以通过下面的两种方式来查看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="no">Greeter</span><span class="o">.</span><span class="n">instance_methods</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;inspect&quot;</span><span class="p">,</span> <span class="s2">&quot;taguri&quot;</span><span class="p">,</span> <span class="s2">&quot;tap&quot;</span><span class="p">,</span> <span class="s2">&quot;clone&quot;</span><span class="p">,</span> <span class="s2">&quot;public_methods&quot;</span><span class="p">,</span> <span class="s2">&quot;__send__&quot;</span><span class="p">,</span> <span class="s2">&quot;taguri=&quot;</span><span class="p">,</span> <span class="s2">&quot;instance_variable_defined?&quot;</span><span class="p">,</span> <span class="s2">&quot;equal?&quot;</span><span class="p">,</span> <span class="s2">&quot;freeze&quot;</span><span class="p">,</span> <span class="s2">&quot;say_hi&quot;</span><span class="p">,</span> <span class="s2">&quot;extend&quot;</span><span class="p">,</span> <span class="s2">&quot;send&quot;</span><span class="p">,</span> <span class="s2">&quot;methods&quot;</span><span class="p">,</span> <span class="s2">&quot;hash&quot;</span><span class="p">,</span> <span class="s2">&quot;dup&quot;</span><span class="p">,</span> <span class="s2">&quot;object_id&quot;</span><span class="p">,</span> <span class="s2">&quot;instance_variables&quot;</span><span class="p">,</span> <span class="s2">&quot;eql?&quot;</span><span class="p">,</span> <span class="s2">&quot;to_yaml&quot;</span><span class="p">,</span> <span class="s2">&quot;say_bye&quot;</span><span class="p">,</span> <span class="s2">&quot;instance_eval&quot;</span><span class="p">,</span> <span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="s2">&quot;singleton_methods&quot;</span><span class="p">,</span> <span class="s2">&quot;taint&quot;</span><span class="p">,</span> <span class="s2">&quot;frozen?&quot;</span><span class="p">,</span> <span class="s2">&quot;instance_variable_get&quot;</span><span class="p">,</span> <span class="s2">&quot;to_enum&quot;</span><span class="p">,</span> <span class="s2">&quot;instance_of?&quot;</span><span class="p">,</span> <span class="s2">&quot;display&quot;</span><span class="p">,</span> <span class="s2">&quot;to_a&quot;</span><span class="p">,</span> <span class="s2">&quot;h&quot;</span><span class="p">,</span> <span class="s2">&quot;to_yaml_style&quot;</span><span class="p">,</span> <span class="s2">&quot;type&quot;</span><span class="p">,</span> <span class="s2">&quot;instance_exec&quot;</span><span class="p">,</span> <span class="s2">&quot;protected_methods&quot;</span><span class="p">,</span> <span class="s2">&quot;==&quot;</span><span class="p">,</span> <span class="s2">&quot;===&quot;</span><span class="p">,</span> <span class="s2">&quot;instance_variable_set&quot;</span><span class="p">,</span> <span class="s2">&quot;enum_for&quot;</span><span class="p">,</span> <span class="s2">&quot;kind_of?&quot;</span><span class="p">,</span> <span class="s2">&quot;respond_to?&quot;</span><span class="p">,</span> <span class="s2">&quot;to_yaml_properties&quot;</span><span class="p">,</span> <span class="s2">&quot;method&quot;</span><span class="p">,</span> <span class="s2">&quot;to_s&quot;</span><span class="p">,</span> <span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;private_methods&quot;</span><span class="p">,</span> <span class="s2">&quot;=~&quot;</span><span class="p">,</span> <span class="s2">&quot;tainted?&quot;</span><span class="p">,</span> <span class="s2">&quot;__id__&quot;</span><span class="p">,</span> <span class="s2">&quot;untaint&quot;</span><span class="p">,</span> <span class="s2">&quot;nil?&quot;</span><span class="p">,</span> <span class="s2">&quot;is_a?&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面输出了类<code>Greeter</code>拥有的全部方法，我们也可以通过给<code>instance_methods</code>传递<code>false</code>来指定只显示自己定义的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Greeter</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;say_hi&quot;</span><span class="p">,</span> <span class="s2">&quot;say_bye&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以使用<code>respond_to?</code>(函数名可以直接用?有木有！)来检查一个实例对象是否具有某个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="s2">&quot;say_hi&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<h4>类的动态特性</h4>

<p>在类已经定义完成后，我们还可以继续对类进行修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Greeter</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码对class进行了修改，使得<code>name</code>可以被访问，注意上面的代码并未覆盖原有定义，而是<strong>增加</strong>了定义。并且这些修改将马上在新的实例化对象和<strong>已经实例化</strong>的对象身上起作用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;neekey&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;nic&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">nic</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的例子来看，似乎<code>name</code>已经从私有变成了公共可被外部访问了（不知道ruby里面是否存在这样的术语）。但是真的是这样么？我们继续看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="s2">&quot;name=&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，其实通过<code>attr_accessor</code>的定义，<strong>不是</strong>将name变成所谓的<code>公有属性</code>，而是添加了该属性的<code>getter</code>和<code>setter</code>，完全可以用下面的方式来写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">name</span><span class="p">()</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">nic</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">name</span><span class="o">=</span><span class="p">(</span><span class="s2">&quot;neekey&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">neekey</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外从构造函数中的<code>@name=name</code>一句可以看到，<a href="http://www.ruby-lang.org">Ruby</a>的属性是可以动态添加的。</p>

<p>上面就是教程的大体内容。有时间继续学习~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012小规划！]]></title>
    <link href="http://neekey.github.com/blog/2012/02/08/2012bi-xu-yao-shi-yi-ge-chong-man-gai-bian-de-nian-fen-a/"/>
    <updated>2012-02-08T17:55:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/02/08/2012bi-xu-yao-shi-yi-ge-chong-man-gai-bian-de-nian-fen-a</id>
    <content type="html"><![CDATA[<p><img src="http://neekey.github.com/images/posts/mengmao1.jpg" alt="萌图啊" /></p>

<p>转眼间就过完年，已经回到学校，都二月份了。趁着还不算太晚，在此把今年希望完成的和实现的东东列举一下，自勉!</p>

<!--more-->


<h3>技术</h3>

<p>作为一名程序员，技术是必须不断提高的！</p>

<ul>
<li>对Javascript基础知识来一次全面的回顾和总结

<ul>
<li>语言基础</li>
<li>语言级别的常用方法</li>
<li>浏览器相关的各种对象与方法</li>
<li>兼容性总结</li>
</ul>
</li>
<li>CSS知识整理

<ul>
<li>css基础（所有的属性，值）</li>
<li>css兼容性的总结</li>
<li>仔细地看几本CSS的书</li>
</ul>
</li>
<li>HTML5方面

<ul>
<li>可以进行各种小demo的实践</li>
<li>对一些常用的html5新特性进行学习和实践</li>
</ul>
</li>
<li>nodeJS继续学习

<ul>
<li>根据API对各个系统模块进行实践</li>
<li>尝试更多的小应用</li>
</ul>
</li>
<li>继续实践单元测试

<ul>
<li>后端nodeJS单元测试</li>
<li>前端单元测试实践</li>
<li>看一本单元测试的书籍</li>
</ul>
</li>
<li>继续学习和实践SASS &amp; LESS：SASS更加牛逼的样子！</li>
<li>改进开发思维，多思考！学会<strong>迭代开发</strong>！</li>
<li>学习<strong>shell &amp; ruby</strong>来写些简单的脚本，用于处理文本/文件，提高平时的工作效率</li>
<li>学习Objective-C

<ul>
<li>看完2本或者以上的书籍</li>
<li>编写一个简单的Mac应用（比如定时关机）</li>
</ul>
</li>
<li>Wordpress开发：发现wordpress的二次开发非常有用..特别是对于快读建站来说

<ul>
<li>试着用wp建立一个自定义的咨询网站</li>
</ul>
</li>
<li>最后一点也是很重要的要求：多积累和总结，静下心来多看看书！</li>
</ul>


<h3>技术个人网站</h3>

<p>博客现在用的是<a href="http://octopress.org">Octopress</a>，其实博客功能本身很简单，还有很大的DIY空间。</p>

<ul>
<li>使用<a href="http://sass-lang.com/">SASS</a>修改网站样式</li>
<li>添加一个自定义页，添加自己的各种应用啊组件的gallery</li>
<li>添加订阅功能</li>
</ul>


<p>然后在<a href="http://neekey.net">neekey.net</a>上做些有意思的应用吧，可以尝试PHP的一些其他方面的方法：</p>

<ul>
<li>文件处理</li>
<li>图像处理</li>
<li>通信</li>
</ul>


<h3>英语</h3>

<p>先别说好多技术资料都是英文的，英语不好看起来泪流满面。何况心里还有一个出国的梦呢，英语不学好，能行么？</p>

<ul>
<li>单词！不求别的，尼玛今年务必把六级单词先背背熟啊！(靠RP六级已过…)</li>
<li>口语！至少把<a href="http://www.douban.com/note/133888998/">Rosetta Stone</a>课程上完，话说要不要破点财，报个新东方神马的试试看，自己学的话缺少外教啊~~ 自己去找，人家表示很羞涩。</li>
<li>英文歌词！英文歌听了无数，但是这么多年，就没有认认真真读过歌词。所以尽量把每首歌的歌词看一遍，最好能记下来，也方便唱。</li>
</ul>


<h3>写作</h3>

<p>其实内心深处还是有很强烈的表达欲望的，但是文笔已经完全不行了，也没了初中高中的时候写QQ日志的那种激情。对自己的要求：</p>

<ul>
<li>每个月能写一片非技术类的文章。写的好坏没关系。非技术类的矫情文章发表在QQ空间，也可以考虑人人和豆瓣</li>
<li>多看文学作品，利用好Kindle</li>
<li>平时对周围的生活实事多观察多思考，养成<strong>随手记下想法</strong>的习惯</li>
</ul>


<h3>旅行</h3>

<p><del>由于今年在时间和金钱上都不是很充裕，而且本身自己的旅游经验就很少，因此今年关于旅游的期望是：短途（杭州周边，甚至杭州都可以），二到三次。然后，可以考虑一个人去。</del></p>

<p>没想到毕业旅行一路西安-西宁-诺木洪-格尔木-拉萨 完了差不多20天。今年还会有旅游的机会。倒是暂时没有心仪的地点，反而希望能给自己一个明确的理由，再决定去哪里。</p>

<h3>听歌</h3>

<p>不断更新在听的音乐，国产摇滚可以尝试，欧美英伦摇滚可以继续，流行自己喜欢的继续跟上，其他形式的音乐也可以多听（轻音乐，音乐剧）</p>

<h3>声乐</h3>

<p>每次在寝室里都能唱的很嗨，高音都能控制的很好。但是每次去KTV就萎了！真心不爽，而且本身就喜欢唱歌，所以最好今年能去报个专业的声乐班（或者找个老师）。</p>

<p>要求是声乐的演唱技巧和理论知识（比如五线谱啦&#8230;音乐的一些意识啦，流派啦）都能学习到。</p>

<h3>游泳</h3>

<p><del>第一次去深水区，就被救生员吆喝上岸…这种耻辱一辈子忘不了啊！今年必须能熟练游泳！</del></p>

<p>表示在深水区淡定地哇用过了，今年求继续熟练，最后好能学会别的泳姿。恩恩。</p>

<h3>牙套</h3>

<p>再不戴牙套，人都老了。这个东西早点开始就早点结束。不过由于经济条件有限，下半年吧，但是至少今年要开始戴起来！</p>

<h3>健身</h3>

<p>我很早就发现，我和我哥一样，体重一增加，脸就会变大T T，所以健身是增加体重但是脸不变大的方式之一。当然最重要的还是增强体质！把胸肌炼实在了，还能避免气胸啊！最好能找个朋友一起去坚持去健身房。</p>

<h3>护肤</h3>

<p><del>泪流满面的问题，痘痘长了这么多年，今年必须有突破啊！下了狠心，也败了很多相关护肤品，今年准备服用泰尔丝了！希望能坚持下来，也希望副作用没有想象中那么可怕！等开始吃了，发一篇每日更新的日志！</del></p>

<p>泰尔丝吃了这么多个月，痘痘基本上已经不长了，HOHO~</p>

<p>接下来的任务是维护和学习理论知识（=。=，多看写牛逼的帖子吧），以及去痘印。</p>

<h3>绘画</h3>

<p>突然回忆起以前作画的感觉了。恩，可以考虑买个画架和画板放在有阳光的房间里，偶尔可以重温一下。可以画点水彩漫画神马的~。要是有时间和精力，真想重新找个好老师，认真学一下素描啊！</p>

<h3>态度</h3>

<ul>
<li>更加<strong>尊重他人</strong></li>
<li>做事更加的专注</li>
<li>沉稳、从容</li>
<li>积极乐观</li>
<li>做自己、学会释放</li>
</ul>


<h3>其他</h3>

<p><del>重构机械学院网站。虽然早就离开创E网络了，但是这个网站以后还是需要传承下来继续维护的。所以希望在毕业前能完成重构！同时也能对PHP更加熟练，还能赚点外快…嗯嗯。</del></p>

<p>好吧，表示实在木有时间和精力，无耻地交付给下一届的孩纸们了，阿门&#8230;</p>

<p><strong>先这些，想到啥再添加上去！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phoneGap+nodejs图片上传(二)]]></title>
    <link href="http://neekey.github.com/blog/2012/01/31/phonegap-plus-nodejstu-pian-shang-chuan-2/"/>
    <updated>2012-01-31T16:50:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/31/phonegap-plus-nodejstu-pian-shang-chuan-2</id>
    <content type="html"><![CDATA[<p>上一篇文章已经介绍了客户端（phoneGap）中图片上传的相关技术。下面介绍服务器端（nodejs）对图片上传的处理。</p>

<p>在对服务器端这边进行编码之前，在网上找了几篇关于nodejs处理文件上传的文章，基本上是使用<a href="https://github.com/visionmedia/connect-form">Connect Form</a>这个模块，但是实际调试的时候发现异常。仔细看了一下这个模块的说明，原来目前已经被废弃，并最终会被移除。对于文件上传的处理，<code>bodyParser()</code>目前已经直接支持。</p>

<!--more-->


<h3>上传文件信息获取</h3>

<p>因此，对于文件上传的处理，首先需要引入<code>bodyParser()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">bodyParser</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后通过<code>req</code>中的<code>files</code>，根据文件的字段名来获取上传的文件信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span> <span class="s1">&#39;/upload&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span> <span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">image</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">files</span><span class="p">.</span><span class="nx">image</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">image</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">image</span><span class="p">.</span><span class="nx">path</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">image</span><span class="p">.</span><span class="nx">length</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">image</span><span class="p">.</span><span class="nx">filename</span> <span class="p">);</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">image</span><span class="p">.</span><span class="nx">mime</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码<code>req.files.image</code>中的<code>image</code>是我在客户端中指定的字段名，然后我们可以通过这个文件信息对象，获取到文件保存到服务器端的路径(<code>path</code>),文件的大小(<code>length</code>),文件名(<code>filename</code>),文件的MIME值(<code>mime</code>)。</p>

<h3>图片类型验证</h3>

<p>通过上面的信息，我们可以利用<code>fs</code>模块，对图片进行重命名等操作。但是在介绍客户端中的上传时，提到过，我们利用phoneGap选取文件的时候，无法获取文件的类型信息（MIME类型甚至没有后缀名）。因此在服务器端，我们不能仅仅凭借客户端发送过来的MIME值来验证文件类型。</p>

<p>解决这个问题最根本的方法是解析二进制的文件头，借此来判断文件的实际类型。根据这个需求，我写了一个简单的模块<a href="https://github.com/neekey/gettype">gettype</a>.</p>

<p>这个模块的API非常简单,给定文件的路径，然后文件类型会在回调函数中作为参数返回。不过因为自身需求有限，暂时只支持常用图片类型<code>JPEG|PNG|BMP|GIF</code>的判断。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">GetType</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span> <span class="s1">&#39;getType&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pathToParse</span> <span class="o">=</span> <span class="s1">&#39;images/jpeg.jpg&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">GetType</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span> <span class="nx">pathToParse</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">type</span> <span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="nx">err</span> <span class="p">){</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;file format parse error!&#39;</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;file format is : &#39;</span> <span class="o">+</span> <span class="nx">type</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成了上面两部，基本上后端这边主要的技术难点就解决了，接下来还需要完成：</p>

<ul>
<li>结合上面两个技术点做文件的大小和类型验证</li>
<li>文件重命名</li>
<li>将文件信息写入到数据库</li>
<li>想客户端返回结果</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phoneGap+nodejs图片上传(一)]]></title>
    <link href="http://neekey.github.com/blog/2012/01/26/phonegap-plus-nodejstu-pian-shang-chuan-1/"/>
    <updated>2012-01-26T17:13:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/26/phonegap-plus-nodejstu-pian-shang-chuan-1</id>
    <content type="html"><![CDATA[<p><strong>继续捣鼓毕设！</strong></p>

<p>前两天将登陆和注册这些通用功能搞定后，现在需要解决从手机端上传图片到服务器的需求。先来一张目前登陆界面截图吧：</p>

<p><img src="http://neekey.github.com/images/posts/st_login.jpg" alt="secondaryTrading_login" /></p>

<p>手机上传图片的功能主要有两方面:</p>

<ul>
<li>客户端，phoneGap是否提供了接口可以让用户选择图片以及拍照上传。选择了图片后的上传方式又是如何。</li>
<li>服务器端，主要是接受客户端的请求，对图片信息进行验证和保存。</li>
</ul>


<!--more-->


<h2>phoneGap</h2>

<p><em>注意，下面的代码实例在android中运行正常，但是不同平台可能会有区别，具体应用中，请仔细阅读API后面对不同平台的Hack!!</em></p>

<p>好，回到主题！phoneGap这边主要分成两块内容</p>

<h3>一、图片的获取</h3>

<p>图片的获取主要靠API中的Camera对象</p>

<p><strong>Camera</strong></p>

<blockquote><p>The camera object provides access to the device&#8217;s default camera application.</p></blockquote>

<p>Camera对象提供了方法来调用系统默认的拍照程序。</p>

<p>Camera对象只有一个方法<code>getPicture</code>,通过给定options，可以指定返回图片的<code>base64编码字符串</code>或者图片的本地URI。</p>

<p><strong>getPicture</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Camera</span><span class="p">.</span><span class="nx">getPicture</span><span class="p">(</span> <span class="nx">cameraSuccess</span><span class="p">,</span> <span class="nx">cameraError</span><span class="p">,</span> <span class="p">[</span> <span class="nx">cameraOptions</span> <span class="p">]</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>cameraOptions</strong></p>

<ul>
<li>quality: 保存的图片质量（个人觉得应该是指拍照的情况），数字，范围为：0-100</li>
<li>destinationType: 选择返回的图片数据格式。<code>URI</code>或者是<code>base64 encoded string</code>,这两个值定义如下：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Camera</span><span class="p">.</span><span class="nx">DestinationType</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">DATA_URL</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>                <span class="c1">// Return image as base64 encoded string</span>
</span><span class='line'>  <span class="nx">FILE_URI</span> <span class="o">:</span> <span class="mi">1</span>                 <span class="c1">// Return image file URI</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>sourceType: 设置图片的来源，拍照或者从图库中寻找（但是实际有三种选项，<code>PHOTOLIBRARY</code>和<code>SAVEDPHOTOALBUM</code>和区别不是很清楚哈～）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Camera</span><span class="p">.</span><span class="nx">PictureSourceType</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">PHOTOLIBRARY</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">CAMERA</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">SAVEDPHOTOALBUM</span> <span class="o">:</span> <span class="mi">2</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>allowEdit: 允许在图片被确认选择前进行简单的编辑</li>
<li>EncodingType: 设置照片的格式（应该是针对拍照的情况）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Camera</span><span class="p">.</span><span class="nx">EncodingType</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">JPEG</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>               <span class="c1">// Return JPEG encoded image</span>
</span><span class='line'>  <span class="nx">PNG</span> <span class="o">:</span> <span class="mi">1</span>                 <span class="c1">// Return PNG encoded image</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>targetWidth: 设定图片的宽度</li>
<li>targetHeight: 设定图片的高度</li>
<li>MediaType: 设置可以选取的文件类型（可以是只有图片，只有视频，或者都可以），这个选项只有在<code>sourceType</code>不是<code>Camera.PictureSourceType.CAMERA</code>才起作用</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Camera</span><span class="p">.</span><span class="nx">MediaType</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">PICTURE</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>             <span class="c1">// allow selection of still pictures only. DEFAULT. Will return format specified via DestinationType</span>
</span><span class='line'>    <span class="nx">VIDEO</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>               <span class="c1">// allow selection of video only, WILL ALWAYS RETURN FILE_URI</span>
</span><span class='line'>    <span class="nx">ALLMEDIA</span> <span class="o">:</span> <span class="mi">2</span>            <span class="c1">// allow selection from all media types</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>代码示例</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">navigator</span><span class="p">.</span><span class="nx">camera</span><span class="p">.</span><span class="nx">getPicture</span><span class="p">(</span><span class="nx">onSuccess</span><span class="p">,</span> <span class="nx">onError</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">quality</span><span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">destinationType</span><span class="o">:</span> <span class="nx">Camera</span><span class="p">.</span><span class="nx">DestinationType</span><span class="p">.</span><span class="nx">FILE_URI</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">sourceType</span><span class="o">:</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">camera</span><span class="p">.</span><span class="nx">PictureSourceType</span><span class="p">.</span><span class="nx">PHOTOLIBRARY</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">onSuccess</span><span class="p">(</span> <span class="nx">imageURI</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span> <span class="nx">imageURI</span> <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">onError</span><span class="p">(</span> <span class="nx">msg</span> <span class="p">){</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span> <span class="s1">&#39;图片获取失败:&#39;</span> <span class="o">+</span> <span class="nx">msg</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意下面设置返回为图片的URI，除此之外没有其他参数。图片URI大概是这个样子：
<code>content://media/external/images/media/4</code>
我们将这段<code>URI</code>设置给<code>img</code>元素的<code>src</code>属性来实现本地图片，但是除此之外，<strong>貌似无法知道图片的具体格式</strong>，所以后面会涉及到后端nodejs的后端校验。</p>

<h3>二、图片上传</h3>

<p>上面介绍了如何让用户选取图片，下面介绍下文件的上传。</p>

<p>phoneGap中封装了对手机中的文件进行操作的一些常用方法。其中<code>FileTransfer</code>对象允许你通过调用其实例对象的<code>upload</code>方法将本地文件上传到服务器。</p>

<p><code>FileTransfer</code>使用<code>HTTP multi-part POST</code>请求. 支持<code>HTTP</code>和<code>HTTPS</code>协议. 可以通过传递一个<code>FileUploadOptions</code>对象到<code>upload</code>方法，来设置上传相关的参数.</p>

<p><strong>upload</strong>方法的具体使用直接看代码吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileUploadOptions</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ft</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileTransfer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">options</span><span class="p">.</span><span class="nx">fileKey</span><span class="o">=</span> <span class="s1">&#39;image&#39;</span><span class="p">;</span>    <span class="c1">// 相当与表单中的name字段</span>
</span><span class='line'><span class="nx">options</span><span class="p">.</span><span class="nx">fileName</span><span class="o">=</span> <span class="s1">&#39;图片名称&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">options</span><span class="p">.</span><span class="nx">mimeType</span><span class="o">=</span> <span class="s2">&quot;image/png&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">options</span><span class="p">.</span><span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">field1</span><span class="o">:</span> <span class="s1">&#39;value1&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">field2</span><span class="o">:</span> <span class="s1">&#39;value2&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">};</span>                         <span class="c1">// 跟随文件一起发送的自定义额外的字段</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ft</span><span class="p">.</span><span class="nx">upload</span><span class="p">(</span> <span class="nx">imageURI</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">op</span><span class="p">.</span><span class="nx">success</span><span class="p">,</span> <span class="nx">op</span><span class="p">.</span><span class="nx">error</span><span class="p">,</span> <span class="nx">options</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">success</span><span class="p">(</span> <span class="nx">fileUploadResult</span> <span class="p">){</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span> <span class="s1">&#39;文件上传成功&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">error</span><span class="p">(</span> <span class="nx">fileTransferError</span> <span class="p">){</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span> <span class="s1">&#39;文件上传失败&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来简单介绍<code>FileUploadResult</code>和<code>FileTransferError</code></p>

<p><strong>FileUploadResult</strong></p>

<p>Properties:</p>

<ul>
<li>bytesSent：总共传送到服务器的字节数</li>
<li>responseCode：服务器返回的HTTP响应码</li>
<li>response：服务其返回数据</li>
</ul>


<p><strong>fileTransferError</strong></p>

<p>文件操作相关的方法出现的异常对象都是使用该对象。</p>

<p>Properties:</p>

<ul>
<li>code: 预先定义的错误代码.</li>
</ul>


<p>预定义的代码有以下三种：</p>

<ul>
<li>FileTransferError.FILE_NOT_FOUND_ERR 文件未找到</li>
<li>FileTransferError.INVALID_URL_ERR 非法的URL</li>
<li>FileTransferError.CONNECTION_ERR 连接错误</li>
</ul>


<p><strong>OK！phoneGap这边主要就是上面两个方法，下一篇文章继续介绍nodejs这边的细节。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NAE初使用]]></title>
    <link href="http://neekey.github.com/blog/2012/01/15/naechu-shi-yong/"/>
    <updated>2012-01-15T15:53:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/15/naechu-shi-yong</id>
    <content type="html"><![CDATA[<p><img src="http://neekey.github.com/images/posts/Nae.png" alt="Nae-image" /></p>

<p><a href="http://cnodejs.net/"><strong>NAE</strong></a>：Node App Engine，是基于Node.js v0.6.2开发的应用托管服务, 可提供node.js应用的在线部署功能。</p>

<p>这两天把毕设作品中的，后端权限验证部分的接口写了大概，准备放到手机上测试。但是手机上要请求本本这边的本地服务器有点麻烦，想想一直闲着没用过的NAE账号，干脆部署到上面去好了。</p>

<p>昨天稻谷了半天，终于成功部署。在这里记下几点想法和总结把。</p>

<!-- more -->


<h3>NAE提供的功能</h3>

<ul>
<li>每个用户可以创建10个应用，每个应用都可以邀请其他用户一起参与合作，也可以申请加入其他人的应用</li>
<li>可以为每个应用自定义子域名，比如<code>neekey.cnodejs.net</code></li>
<li>代码部署

<ul>
<li>支持使用git进行代码管理</li>
<li>支持本地上传</li>
<li>可以自定义使用npm安装需要的模块</li>
</ul>
</li>
<li>提供自带网络代码编辑器（很好用!!）</li>
<li>提供网络日志（不过暂时智能查看，没办法清理啦删除之类的，这个有待改进啊）</li>
<li>提供mongodb数据库，每个应用都拥有一个独立的db</li>
<li>代办事项功能（类似一个todo-list）</li>
</ul>


<p><strong>总体来说，我觉得NAE这样一个免费的应用托管服务，提供的功能还是非常强大的，而且多人开发这样的功能也非常方便多人协作开发！</strong></p>

<h3>第一次使用的几点经验</h3>

<p><strong>配置好你的<code>package.json</code>文件</strong></p>

<p>代码根目录下需要有<code>package.json</code>这个文件，其中要指定需要运行的主文件名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;hello world&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;main&#39;</span><span class="o">:</span> <span class="s1">&#39;./app.js&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果不指定，会自动搜索<code>./index.js</code>文件执行</p>

<p>另外，现在已经提供了<code>package.json</code>的GUI设置功能</p>

<p><strong>数据库连接</strong></p>

<p>默认已经给了数据库账号，密码，数据库名称，端口号。只要根据这些信息，在脚本中进行数据库的连接就可以了，以mongoose为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span> <span class="s1">&#39;mongodb://&#39;</span> <span class="o">+</span> <span class="nx">USERNAME</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">PASSWORD</span> <span class="o">+</span> <span class="s1">&#39;@&#39;</span> <span class="o">+</span> <span class="nx">HOST</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">PORT</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">DATABASE</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于本人粗心大意，第一次部署的时候忘了写上端口，导致日志里有相关错误（但是我看不明白），应用上线后，接口出错！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在nodejs中使用jasmina(一)]]></title>
    <link href="http://neekey.github.com/blog/2012/01/11/zai-nodejszhong-shi-yong-jasmina-1/"/>
    <updated>2012-01-11T21:36:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/11/zai-nodejszhong-shi-yong-jasmina-1</id>
    <content type="html"><![CDATA[<p>寒假在家，终于可以开始好好做毕设！</p>

<p>今天在写后台用户数据操作时，想到每次写类似的模块，在大体完成后总会出现各种Bug，往往调试占用了大量的时间。因此决定这次为每个接口都写一下单元测试。</p>

<p>由于之前听过同事关于<a href="http://pivotal.github.com/jasmine/">Jasmine</a>的分享，感觉还不错，所以就用它了。</p>

<p><img src="http://neekey.github.com/images/posts/jasmine_logo.png" alt="Jasmine-logo" /></p>

<!-- more -->


<h3>为nodejs添加jasmine模块</h3>

<p>由于后端使用<a href="http://nodejs.org/">nodeJS</a>开发，因此先用<a href="http://npmjs.org/">npm</a>安装<a href="http://pivotal.github.com/jasmine/">Jasmine</a></p>

<pre><code>npm install jasmine-node
</code></pre>

<p>安装完成后，就只可以直接在终端中使用jasmine-node命令了</p>

<h3>使用Jasmine-node命令</h3>

<p><strong>Jasmine-node 参数</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>USAGE: jasmine-node <span class="o">[</span>--color|--noColor<span class="o">]</span> <span class="o">[</span>--verbose<span class="o">]</span> <span class="o">[</span>--coffee<span class="o">]</span> directory
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  --color            - use color coding <span class="k">for </span>output
</span><span class='line'>  --noColor          - <span class="k">do </span>not use color coding <span class="k">for </span>output
</span><span class='line'>  -m, --match REGEXP - load only specs containing <span class="s2">&quot;REGEXPspec&quot;</span>
</span><span class='line'>  --verbose          - print extra information per each <span class="nb">test </span>run
</span><span class='line'>  --coffee           - load coffee-script which allows execution .coffee files
</span><span class='line'>  --junitreport      - <span class="nb">export </span>tests results as junitreport xml format
</span><span class='line'>  --teamcity         - converts all console output to teamcity custom <span class="nb">test </span>runner commands. <span class="o">(</span>Normally auto detected.<span class="o">)</span>
</span><span class='line'>  --runWithRequireJs - loads all specs using requirejs instead of node<span class="err">&#39;</span>s native require method
</span><span class='line'>  --test-dir         - the absolute root directory path where tests are located
</span><span class='line'>  --nohelpers        - does not load helpers.
</span><span class='line'>  -h, --help         - display this <span class="nb">help </span>and <span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>使用简单说明</strong></p>

<ul>
<li>指定目录进行单元测试：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>jasmine-node <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>注意指定的目录下的包含单元测试代码的脚本文件必须为js或者coffee格式，并且文件名最后必须为<strong>spec</strong>，比如文件：<code>userSpec.js</code>，<code>user.spec.coffee</code></p>

<ul>
<li>常用的参数简单说明

<ul>
<li>verbose 默认的结果只显示成功了多少，失败了多少，然后显示失败的信息，指定该参数后，会将所有的信息都输出</li>
<li>test-dir 指定目录的绝对路径</li>
</ul>
</li>
</ul>


<h3>如何写测试代码</h3>

<p>由于之前没怎么写过单元测试，因此对测试的理解比较肤浅，我的理解比较简单：</p>

<p><em>通过某个过程得到一个结果，然后判断是否这个结果是我们预期的。一般这样的测试，其结果应该是可以预知并且可以对结果进行判断</em></p>

<p><strong>最简单的测试代码</strong></p>

<p>好，现在我们建立一个test文件夹，从最简单的测试代码开始：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span> <span class="s1">&#39;描述一下这个单元测试&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span> <span class="s1">&#39;算数的结果总是比较容易预测&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span> <span class="mi">3</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>将这个文件命名为 simpleTestSpec.js，然后使用命令:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>jasmine-node <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>描述一下这个单元测试
</span><span class='line'>  算数的结果总是比较容易预测
</span><span class='line'>
</span><span class='line'>Finished in 0.008 seconds
</span><span class='line'>1 <span class="nb">test</span>, 1 assertion, 0 failures
</span></code></pre></td></tr></table></div></figure>


<p>现在我们故意将测试代码改为<code>expect(1+2).toEqual(0);</code>，重新运行一下，得到结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>描述一下这个单元测试
</span><span class='line'>  算数的结果总是比较容易预测
</span><span class='line'>
</span><span class='line'>Failures:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> 算数的结果总是比较容易预测
</span><span class='line'>   Message:
</span><span class='line'>     Expected 3 to equal 0.
</span><span class='line'>   Stacktrace:
</span><span class='line'>     Error: Expected 3 to equal 0.
</span><span class='line'>    at new &lt;anonymous&gt; <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:102:32<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.toEqual <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1171:29<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.&lt;anonymous&gt; <span class="o">(</span>/users/neekey/Desktop/mhevery-jasmine-node-d3dc963/spec/TestSpec.js:4:19<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.execute <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1001:15<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.next_ <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1790:31<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.start <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1743:8<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.execute <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:2070:14<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.next_ <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1790:31<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.start <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1743:8<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.execute <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:2215:14<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Finished in 0.011 seconds
</span><span class='line'>1 <span class="nb">test</span>, 1 assertion, 1 failure
</span></code></pre></td></tr></table></div></figure>


<p>上面的describe可以最为一类测试的<strong>群组</strong>，而it则是这些测试中的其中一<strong>项</strong>。而<code>expect</code>就是做一次<strong>断言</strong>。</p>

<h4>异步代码测试</h4>

<p><a href="http://pivotal.github.com/jasmine/">Jasmine</a>主要提供了三个方法来让我们实现对异步脚本的测试：</p>

<ul>
<li><strong>runs(function)</strong> 官方的说明是：<em>runs() blocks by themselves simply run as if they were called directly</em>, 觉得不是很理解，直接看代码吧，当只有一个<code>runs()</code>的情况下，下面两端代码的效果一致：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be a test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nx">foo</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be a test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">foo</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>出现多个<code>runs()</code>的时候，他们将以串行的方式执行，需要注意的是，在<code>runs()</code>指定的函数内部，<code>this</code>是被多个<code>runs()</code>共享的。
下面这个例子，多个<code>runs()</code>串行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be a test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">bar</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">bar</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">bar</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">bar</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>waits(timeout)</strong> 这个方法和<code>runs()</code>一起使用，我们可以通过该方法来指定阻塞多久再执行下一个<code>runs()</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be a test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">that</span><span class="p">.</span><span class="nx">foo</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">250</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">waits</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码在执行完第二个<code>runs()</code>后没有直接执行第三个<code>runs()</code>,知道<code>waits()</code>指定的500毫秒到达后，再执行<code>runs()</code>。利用这个方法，我们可以对一些异步回调（这些回调的返回时间可以估计）进行测试。</p>

<p>需要注意的是，如果第三个<code>runs()</code>内的代码不用runs来包裹，直接写在外面，<strong>将无法被阻塞执行。</strong></p>

<ul>
<li><strong>waitsFor(function, optional message, optional timeout)</strong> 在很多情况下，我们无法确切地知道回调的在什么时候返回（比如用户的自定义事件，鼠标点击等），这个时候我们就可以使用该方法。该方法只有在给定的function返回了<code>true</code>后才会执行下一个<code>runs()</code>，还可以指定最长等待时间，如果在这个时间内还没有返回<code>true</code>，则显示<code>optional message</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;waitsFor Test&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;after 2sec, it will be true&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">iWillBeTrue</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">iWillBeTrue</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">2000</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">waitsFor</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">iWillBeTrue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span> <span class="s2">&quot;maybe i will never be true&quot;</span><span class="p">,</span> <span class="mi">10000</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">runs</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span> <span class="nx">iWillBeTrue</span> <span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span> <span class="kc">true</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>waitsFor Test
</span><span class='line'>  after 2sec, it will be <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>Finished in 2.013 seconds
</span><span class='line'>1 <span class="nb">test</span>, 1 assertion, 0 failures
</span></code></pre></td></tr></table></div></figure>


<p>我们去掉<code>setTimeout</code>，那么应该<code>iWillBeTrue</code>将永远为<code>false</code>，重新运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>waitsFor Test
</span><span class='line'>  after 2sec, it will be <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>Failures:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> after 2sec, it will be <span class="nb">true</span>
</span><span class='line'><span class="nb">   </span>Message:
</span><span class='line'>     timeout: timed out after 10000 msec waiting <span class="k">for </span>maybe i will never be <span class="nb">true</span>
</span><span class='line'><span class="nb">   </span>Stacktrace:
</span><span class='line'>     undefined
</span><span class='line'>
</span><span class='line'>Finished in 10.921 seconds
</span><span class='line'>1 <span class="nb">test</span>, 1 assertion, 1 failure
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>总体上来说，<a href="http://pivotal.github.com/jasmine/">Jasmine</a>感觉还不错，特别是提供的这几个异步测试的方法，基本上能满足一般单元测试的需求。</p>

<p>先介绍到这，更多细节后续会跟进。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopass部署]]></title>
    <link href="http://neekey.github.com/blog/2012/01/08/octopassbu-shu/"/>
    <updated>2012-01-08T20:32:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/08/octopassbu-shu</id>
    <content type="html"><![CDATA[<p>部署可以参考：<a href="http://octopress.org/docs/setup/">Octopress Setup</a></p>

<h3>本地部署</h3>

<p><strong>首先是配置Octopress需要的环境：</strong></p>

<ul>
<li>由于Octopress需要使用到Git，因此需要先安装<a href="http://git-scm.com/">Git</a></li>
<li>ruby 1.9.2 ( 可以使用RVM或者rbenv，他们都是ruby的环境管理软件 )</li>
</ul>


<p><strong>安装RVM</strong></p>

<p>用以下命令安装：</p>

<p><code>bash &lt; &lt;(curl -s https://rvm.beginrescueend.com/install/rvm)</code></p>

<p>安装完成后，需要修改用户目录下的.bash_profile文件，将RVM设置为shell的一个function:</p>

<pre><code>echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bash_profile
source ~/.bash_profile

# If using Zsh do this instead
echo '[[ -s $HOME/.rvm/scripts/rvm ]] &amp;&amp; source $HOME/.rvm/scripts/rvm' &gt;&gt; ~/.zshrc
source ~/.zshrc
</code></pre>

<p>由于我自己对shell命令不是很熟悉，所以简单的查了一下资料。上面的命令中：</p>

<ul>
<li>echo <code>echo 'text' &gt;&gt; targetfile</code> 将text添加到目标文件尾</li>
<li>source <code>source fileHasCodeToRun</code> 执行指定文件中的脚本</li>
</ul>


<!-- more -->


<p><strong>安装ruby 1.9.2</strong></p>

<p>用安装好的rvm来安装ruby 和 <a href="http://rubygems.org/">rubygems</a>(ruby的包管理器)</p>

<pre><code>rvm install 1.9.2 &amp;&amp; rvm use 1.9.2
rvm rubygems latest
</code></pre>

<p><strong>配置Octopass</strong></p>

<p>首先将Octopass的源码clone到本地</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
ruby --version  # Should report Ruby 1.9.2
</code></pre>

<p>注意此处一定要确保<code>ruby --version</code>是1.9.2，否则后面的步骤会出错。</p>

<p>进入Octopass根目录后，安装依赖包：</p>

<pre><code>gem install bundler # 应该是一个用来管理依赖的组件(=.=)
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
</code></pre>

<p>安装完成后，再安装Octopass默认的主题：</p>

<pre><code>rake install
</code></pre>

<p>至此，本地的Octopass就差不多部署完毕了。</p>

<hr />

<h3>部署Octopass到Github Page</h3>

<p>可以直接参考官方的说明：<a href="http://pages.github.com">Github Page</a></p>

<p>简单的来说，就是：</p>

<ul>
<li>建立一个repository，命名：reponame.github.com</li>
<li>在该 repo 根目录下放置一个index.html</li>
<li>通过reponame.github.com来访问</li>
</ul>


<p>非常简单吧！当然Github Page也支持<a href="http://neekey.github.com//http://pages.github.com/#custom_domains">Custom Domain</a></p>

<p>建立好你自己的Github Page后，回到Octopass目录，使用一下命令：</p>

<pre><code>rake setup_github_page
</code></pre>

<p>这个命令将：</p>

<ul>
<li>让你输入你的Github Page的repo的url</li>
<li>Rename the remote pointing to imathis/octopress from ‘origin’ to ‘octopress’(不是很懂…这是原文)</li>
<li><p>将你的Github Page的repo的url作为默认的origin remote</p>

<p>  其实在这里，你在github上的repo对应的本地目录是Octopass/_deploy目录，这个目录下是编译后的静态文件。</p></li>
<li><p>从master分支转换到source分支</p>

<p>  我自己部署的时候发现没有这个变化。而且所谓的source，我自己认为应该是整个Octopass文件夹（里面的_deploy文件夹下的内容倒是不重要，因为每次<code>rake generate</code>都能更新）。我的做法是，<code>git init</code>整个Octopass文件夹，然后<code>add .</code>把所有文件都以<em>source</em>分支提交。</p></li>
<li><p>配置blog的url指向repo</p></li>
<li>为_deploy目录设置master分支，用户部署</li>
</ul>


<p>总之，这个命令的作用我自己还是有点<strong>confused</strong></p>

<p>然后就是生成<strong>_deploy/</strong>目录下的文件，并部署到<strong>github</strong>上:</p>

<pre><code>rake generate
rake deploy
</code></pre>

<p>那么现在的repo各分支的状态就是：</p>

<ul>
<li>master： 对应_deploy目录下的文件</li>
<li>source： 对应Octopass目录下的所有文件（但是不包括_deploy）</li>
</ul>


<p>这样我们就可以用source分支来编辑blog，使用master来发布!</p>

<p><strong>Have Fun！</strong></p>

<hr />

<p>暂时准备先用这个github的域名，过一阵子觉得真心不错的时候，再考虑直接将我的<a href="http://neekey.net/blog">neekey.net</a>指向这边好了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress]]></title>
    <link href="http://neekey.github.com/blog/2012/01/08/octopass/"/>
    <updated>2012-01-08T19:27:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/08/octopass</id>
    <content type="html"><![CDATA[<p>捣鼓了很久，终于将<a href="http://octopress.org/" title="octopress">octopress</a>部署完毕。从此摆脱Wordpress开始开始Geek式的blog生活！</p>

<p><img src="http://octopress.org/images/logo.png?1325260964" alt="OctopassLogo" /></p>

<p>octopress<strong>官方介绍</strong>：</p>

<blockquote><p>Octopress is a framework designed by Brandon Mathis for Jekyll, the blog aware static site generator powering Github Pages. To start blogging with Jekyll, you have to write your own HTML templates, CSS, Javascripts and set up your configuration. But with Octopress All of that is already taken care of. Simply clone or fork Octopress, install dependencies and the theme, and you’re set.</p></blockquote>

<p>由于本人也是刚刚接触<a href="http://octopress.org/" title="octopress">octopress</a>，了解不是很深入，我自己感觉它主要有下面这些特点：</p>

<ol>
<li>基于Ruby（所以对Ruby开发者来说非常友好）</li>
<li>支持Markdown</li>
<li><p>使用git进行版本控制</p>

<p> <a href="http://octopress.org/" title="octopress">octopress</a>本身不需要任何database，所有的数据都是静态文件，然后使用git进行维护。</p></li>
<li><p>轻松部署</p>

<p> <a href="http://octopress.org/" title="octopress">octopress</a>使用<a href="http://jekyllrb.com/" title="jekyll">Jekyll</a>静态网站产生引擎，可以轻松生成<strong>static-file based</strong>类型的网站，部署非常方便（如上面一条，不需要任何database）</p>

<p> 你可以渲染放置到自己的服务器上，<a href="http://www.heroku.com/" title="Heroku">Heroku</a>，或者是<a href="http://pages.github.com/" title="github page">Github Page</a>（我就是放到git上的，很cool吧！）上。</p></li>
<li>支持各种插件</li>
<li>支持<a href="https://gist.github.com/" title="gist">gist</a>(没用过，但是貌似很给力的样子，hoho！)</li>
<li>使用<a href="http://sass-lang.com/" title="SASS">SASS</a>，<a href="http://compass-style.org/" title="Compass">Compass</a>等新奇玩意</li>
</ol>


<p>OK！大体就是这样，具体可以直接到官网看文档。下一篇文章会详细介绍下如何部署Octopass！</p>
]]></content>
  </entry>
  
</feed>

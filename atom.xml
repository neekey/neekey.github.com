<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Neekey]]></title>
  <link href="http://neekey.github.com/atom.xml" rel="self"/>
  <link href="http://neekey.github.com/"/>
  <updated>2012-02-01T10:05:52+08:00</updated>
  <id>http://neekey.github.com/</id>
  <author>
    <name><![CDATA[neekey(niyunjian)]]></name>
    <email><![CDATA[ni184775761@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[phoneGap+nodejs图片上传(二)]]></title>
    <link href="http://neekey.github.com/blog/2012/01/31/phonegap-plus-nodejstu-pian-shang-chuan-2/"/>
    <updated>2012-01-31T16:50:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/31/phonegap-plus-nodejstu-pian-shang-chuan-2</id>
    <content type="html"><![CDATA[<p>上一篇文章已经介绍了客户端（phoneGap）中图片上传的相关技术。下面介绍服务器端（nodejs）对图片上传的处理。</p>

<p>在对服务器端这边进行编码之前，在网上找了几篇关于nodejs处理文件上传的文章，基本上是使用<a href="https://github.com/visionmedia/connect-form">Connect Form</a>这个模块，但是实际调试的时候发现异常。仔细看了一下这个模块的说明，原来目前已经被废弃，并最终会被移除。对于文件上传的处理，<code>bodyParser()</code>目前已经直接支持。</p>

<!--more-->


<h3>上传文件信息获取</h3>

<p>因此，对于文件上传的处理，首先需要引入<code>bodyParser()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">bodyParser</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后通过<code>req</code>中的<code>files</code>，根据文件的字段名来获取上传的文件信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span> <span class="s1">&#39;/upload&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span> <span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">image</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">files</span><span class="p">.</span><span class="nx">image</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">image</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">image</span><span class="p">.</span><span class="nx">path</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">image</span><span class="p">.</span><span class="nx">length</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">image</span><span class="p">.</span><span class="nx">filename</span> <span class="p">);</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">image</span><span class="p">.</span><span class="nx">mime</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码<code>req.files.image</code>中的<code>image</code>是我在客户端中指定的字段名，然后我们可以通过这个文件信息对象，获取到文件保存到服务器端的路径(<code>path</code>),文件的大小(<code>length</code>),文件名(<code>filename</code>),文件的MIME值(<code>mime</code>)。</p>

<h3>图片类型验证</h3>

<p>通过上面的信息，我们可以利用<code>fs</code>模块，对图片进行重命名等操作。但是在介绍客户端中的上传时，提到过，我们利用phoneGap选取文件的时候，无法获取文件的类型信息（MIME类型甚至没有后缀名）。因此在服务器端，我们不能仅仅凭借客户端发送过来的MIME值来验证文件类型。</p>

<p>解决这个问题最根本的方法是解析二进制的文件头，借此来判断文件的实际类型。根据这个需求，我写了一个简单的模块<a href="https://github.com/neekey/gettype">gettype</a>.</p>

<p>这个模块的API非常简单,给定文件的路径，然后文件类型会在回调函数中作为参数返回。不过因为自身需求有限，暂时只支持常用图片类型<code>JPEG|PNG|BMP|GIF</code>的判断。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">GetType</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span> <span class="s1">&#39;getType&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pathToParse</span> <span class="o">=</span> <span class="s1">&#39;images/jpeg.jpg&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">GetType</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span> <span class="nx">pathToParse</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">type</span> <span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="nx">err</span> <span class="p">){</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;file format parse error!&#39;</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;file format is : &#39;</span> <span class="o">+</span> <span class="nx">type</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成了上面两部，基本上后端这边主要的技术难点就解决了，接下来还需要完成：</p>

<ul>
<li>结合上面两个技术点做文件的大小和类型验证</li>
<li>文件重命名</li>
<li>将文件信息写入到数据库</li>
<li>想客户端返回结果</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phoneGap+nodejs图片上传(一)]]></title>
    <link href="http://neekey.github.com/blog/2012/01/26/phonegap-plus-nodejstu-pian-shang-chuan-1/"/>
    <updated>2012-01-26T17:13:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/26/phonegap-plus-nodejstu-pian-shang-chuan-1</id>
    <content type="html"><![CDATA[<p><strong>继续捣鼓毕设！</strong></p>

<p>前两天将登陆和注册这些通用功能搞定后，现在需要解决从手机端上传图片到服务器的需求。先来一张目前登陆界面截图吧：</p>

<p><img src="http://neekey.github.com/images/posts/st_login.jpg" alt="secondaryTrading_login" /></p>

<p>手机上传图片的功能主要有两方面:</p>

<ul>
<li>客户端，phoneGap是否提供了接口可以让用户选择图片以及拍照上传。选择了图片后的上传方式又是如何。</li>
<li>服务器端，主要是接受客户端的请求，对图片信息进行验证和保存。</li>
</ul>


<!--more-->


<h2>phoneGap</h2>

<p><em>注意，下面的代码实例在android中运行正常，但是不同平台可能会有区别，具体应用中，请仔细阅读API后面对不同平台的Hack!!</em></p>

<p>好，回到主题！phoneGap这边主要分成两块内容</p>

<h3>一、图片的获取</h3>

<p>图片的获取主要靠API中的Camera对象</p>

<p><strong>Camera</strong></p>

<blockquote><p>The camera object provides access to the device&#8217;s default camera application.</p></blockquote>

<p>Camera对象提供了方法来调用系统默认的拍照程序。</p>

<p>Camera对象只有一个方法<code>getPicture</code>,通过给定options，可以指定返回图片的<code>base64编码字符串</code>或者图片的本地URI。</p>

<p><strong>getPicture</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Camera</span><span class="p">.</span><span class="nx">getPicture</span><span class="p">(</span> <span class="nx">cameraSuccess</span><span class="p">,</span> <span class="nx">cameraError</span><span class="p">,</span> <span class="p">[</span> <span class="nx">cameraOptions</span> <span class="p">]</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>cameraOptions</strong></p>

<ul>
<li>quality: 保存的图片质量（个人觉得应该是指拍照的情况），数字，范围为：0-100</li>
<li>destinationType: 选择返回的图片数据格式。<code>URI</code>或者是<code>base64 encoded string</code>,这两个值定义如下：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Camera</span><span class="p">.</span><span class="nx">DestinationType</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">DATA_URL</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>                <span class="c1">// Return image as base64 encoded string</span>
</span><span class='line'>  <span class="nx">FILE_URI</span> <span class="o">:</span> <span class="mi">1</span>                 <span class="c1">// Return image file URI</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>sourceType: 设置图片的来源，拍照或者从图库中寻找（但是实际有三种选项，<code>PHOTOLIBRARY</code>和<code>SAVEDPHOTOALBUM</code>和区别不是很清楚哈～）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Camera</span><span class="p">.</span><span class="nx">PictureSourceType</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">PHOTOLIBRARY</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">CAMERA</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">SAVEDPHOTOALBUM</span> <span class="o">:</span> <span class="mi">2</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>allowEdit: 允许在图片被确认选择前进行简单的编辑</li>
<li>EncodingType: 设置照片的格式（应该是针对拍照的情况）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Camera</span><span class="p">.</span><span class="nx">EncodingType</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">JPEG</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>               <span class="c1">// Return JPEG encoded image</span>
</span><span class='line'>  <span class="nx">PNG</span> <span class="o">:</span> <span class="mi">1</span>                 <span class="c1">// Return PNG encoded image</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>targetWidth: 设定图片的宽度</li>
<li>targetHeight: 设定图片的高度</li>
<li>MediaType: 设置可以选取的文件类型（可以是只有图片，只有视频，或者都可以），这个选项只有在<code>sourceType</code>不是<code>Camera.PictureSourceType.CAMERA</code>才起作用</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Camera</span><span class="p">.</span><span class="nx">MediaType</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">PICTURE</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>             <span class="c1">// allow selection of still pictures only. DEFAULT. Will return format specified via DestinationType</span>
</span><span class='line'>    <span class="nx">VIDEO</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>               <span class="c1">// allow selection of video only, WILL ALWAYS RETURN FILE_URI</span>
</span><span class='line'>    <span class="nx">ALLMEDIA</span> <span class="o">:</span> <span class="mi">2</span>            <span class="c1">// allow selection from all media types</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>代码示例</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">navigator</span><span class="p">.</span><span class="nx">camera</span><span class="p">.</span><span class="nx">getPicture</span><span class="p">(</span><span class="nx">onSuccess</span><span class="p">,</span> <span class="nx">onError</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">quality</span><span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">destinationType</span><span class="o">:</span> <span class="nx">Camera</span><span class="p">.</span><span class="nx">DestinationType</span><span class="p">.</span><span class="nx">FILE_URI</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">sourceType</span><span class="o">:</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">camera</span><span class="p">.</span><span class="nx">PictureSourceType</span><span class="p">.</span><span class="nx">PHOTOLIBRARY</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">onSuccess</span><span class="p">(</span> <span class="nx">imageURI</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span> <span class="nx">imageURI</span> <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">onError</span><span class="p">(</span> <span class="nx">msg</span> <span class="p">){</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span> <span class="s1">&#39;图片获取失败:&#39;</span> <span class="o">+</span> <span class="nx">msg</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意下面设置返回为图片的URI，除此之外没有其他参数。图片URI大概是这个样子：
<code>content://media/external/images/media/4</code>
我们将这段<code>URI</code>设置给<code>img</code>元素的<code>src</code>属性来实现本地图片，但是除此之外，<strong>貌似无法知道图片的具体格式</strong>，所以后面会涉及到后端nodejs的后端校验。</p>

<h3>二、图片上传</h3>

<p>上面介绍了如何让用户选取图片，下面介绍下文件的上传。</p>

<p>phoneGap中封装了对手机中的文件进行操作的一些常用方法。其中<code>FileTransfer</code>对象允许你通过调用其实例对象的<code>upload</code>方法将本地文件上传到服务器。</p>

<p><code>FileTransfer</code>使用<code>HTTP multi-part POST</code>请求. 支持<code>HTTP</code>和<code>HTTPS</code>协议. 可以通过传递一个<code>FileUploadOptions</code>对象到<code>upload</code>方法，来设置上传相关的参数.</p>

<p><strong>upload</strong>方法的具体使用直接看代码吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileUploadOptions</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ft</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileTransfer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">options</span><span class="p">.</span><span class="nx">fileKey</span><span class="o">=</span> <span class="s1">&#39;image&#39;</span><span class="p">;</span>    <span class="c1">// 相当与表单中的name字段</span>
</span><span class='line'><span class="nx">options</span><span class="p">.</span><span class="nx">fileName</span><span class="o">=</span> <span class="s1">&#39;图片名称&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">options</span><span class="p">.</span><span class="nx">mimeType</span><span class="o">=</span> <span class="s2">&quot;image/png&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">options</span><span class="p">.</span><span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">field1</span><span class="o">:</span> <span class="s1">&#39;value1&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">field2</span><span class="o">:</span> <span class="s1">&#39;value2&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">};</span>                         <span class="c1">// 跟随文件一起发送的自定义额外的字段</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ft</span><span class="p">.</span><span class="nx">upload</span><span class="p">(</span> <span class="nx">imageURI</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">op</span><span class="p">.</span><span class="nx">success</span><span class="p">,</span> <span class="nx">op</span><span class="p">.</span><span class="nx">error</span><span class="p">,</span> <span class="nx">options</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">success</span><span class="p">(</span> <span class="nx">fileUploadResult</span> <span class="p">){</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span> <span class="s1">&#39;文件上传成功&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">error</span><span class="p">(</span> <span class="nx">fileTransferError</span> <span class="p">){</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span> <span class="s1">&#39;文件上传失败&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来简单介绍<code>FileUploadResult</code>和<code>FileTransferError</code></p>

<p><strong>FileUploadResult</strong></p>

<p>Properties:</p>

<ul>
<li>bytesSent：总共传送到服务器的字节数</li>
<li>responseCode：服务器返回的HTTP响应码</li>
<li>response：服务其返回数据</li>
</ul>


<p><strong>fileTransferError</strong></p>

<p>文件操作相关的方法出现的异常对象都是使用该对象。</p>

<p>Properties:</p>

<ul>
<li>code: 预先定义的错误代码.</li>
</ul>


<p>预定义的代码有以下三种：</p>

<ul>
<li>FileTransferError.FILE_NOT_FOUND_ERR 文件未找到</li>
<li>FileTransferError.INVALID_URL_ERR 非法的URL</li>
<li>FileTransferError.CONNECTION_ERR 连接错误</li>
</ul>


<p><strong>OK！phoneGap这边主要就是上面两个方法，下一篇文章继续介绍nodejs这边的细节。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NAE初使用]]></title>
    <link href="http://neekey.github.com/blog/2012/01/15/naechu-shi-yong/"/>
    <updated>2012-01-15T15:53:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/15/naechu-shi-yong</id>
    <content type="html"><![CDATA[<p><img src="http://neekey.github.com/images/posts/Nae.png" alt="Nae-image" /></p>

<p><a href="http://cnodejs.net/"><strong>NAE</strong></a>：Node App Engine，是基于Node.js v0.6.2开发的应用托管服务, 可提供node.js应用的在线部署功能。</p>

<p>这两天把毕设作品中的，后端权限验证部分的接口写了大概，准备放到手机上测试。但是手机上要请求本本这边的本地服务器有点麻烦，想想一直闲着没用过的NAE账号，干脆部署到上面去好了。</p>

<p>昨天稻谷了半天，终于成功部署。在这里记下几点想法和总结把。</p>

<!-- more -->


<h3>NAE提供的功能</h3>

<ul>
<li>每个用户可以创建10个应用，每个应用都可以邀请其他用户一起参与合作，也可以申请加入其他人的应用</li>
<li>可以为每个应用自定义子域名，比如<code>neekey.cnodejs.net</code></li>
<li>代码部署

<ul>
<li>支持使用git进行代码管理</li>
<li>支持本地上传</li>
<li>可以自定义使用npm安装需要的模块</li>
</ul>
</li>
<li>提供自带网络代码编辑器（很好用!!）</li>
<li>提供网络日志（不过暂时智能查看，没办法清理啦删除之类的，这个有待改进啊）</li>
<li>提供mongodb数据库，每个应用都拥有一个独立的db</li>
<li>代办事项功能（类似一个todo-list）</li>
</ul>


<p><strong>总体来说，我觉得NAE这样一个免费的应用托管服务，提供的功能还是非常强大的，而且多人开发这样的功能也非常方便多人协作开发！</strong></p>

<h3>第一次使用的几点经验</h3>

<p><strong>配置好你的<code>package.json</code>文件</strong></p>

<p>代码根目录下需要有<code>package.json</code>这个文件，其中要指定需要运行的主文件名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;hello world&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;main&#39;</span><span class="o">:</span> <span class="s1">&#39;./app.js&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果不指定，会自动搜索<code>./index.js</code>文件执行</p>

<p>另外，现在已经提供了<code>package.json</code>的GUI设置功能</p>

<p><strong>数据库连接</strong></p>

<p>默认已经给了数据库账号，密码，数据库名称，端口号。只要根据这些信息，在脚本中进行数据库的连接就可以了，以mongoose为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span> <span class="s1">&#39;mongodb://&#39;</span> <span class="o">+</span> <span class="nx">USERNAME</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">PASSWORD</span> <span class="o">+</span> <span class="s1">&#39;@&#39;</span> <span class="o">+</span> <span class="nx">HOST</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">PORT</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">DATABASE</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于本人粗心大意，第一次部署的时候忘了写上端口，导致日志里有相关错误（但是我看不明白），应用上线后，接口出错！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在nodejs中使用jasmina(一)]]></title>
    <link href="http://neekey.github.com/blog/2012/01/11/zai-nodejszhong-shi-yong-jasmina-1/"/>
    <updated>2012-01-11T21:36:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/11/zai-nodejszhong-shi-yong-jasmina-1</id>
    <content type="html"><![CDATA[<p>寒假在家，终于可以开始好好做毕设！</p>

<p>今天在写后台用户数据操作时，想到每次写类似的模块，在大体完成后总会出现各种Bug，往往调试占用了大量的时间。因此决定这次为每个接口都写一下单元测试。</p>

<p>由于之前听过同事关于<a href="http://pivotal.github.com/jasmine/">Jasmine</a>的分享，感觉还不错，所以就用它了。</p>

<p><img src="http://neekey.github.com/images/posts/jasmine_logo.png" alt="Jasmine-logo" /></p>

<!-- more -->


<h3>为nodejs添加jasmine模块</h3>

<p>由于后端使用<a href="http://nodejs.org/">nodeJS</a>开发，因此先用<a href="http://npmjs.org/">npm</a>安装<a href="http://pivotal.github.com/jasmine/">Jasmine</a></p>

<pre><code>npm install jasmine-node
</code></pre>

<p>安装完成后，就只可以直接在终端中使用jasmine-node命令了</p>

<h3>使用Jasmine-node命令</h3>

<p><strong>Jasmine-node 参数</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>USAGE: jasmine-node <span class="o">[</span>--color|--noColor<span class="o">]</span> <span class="o">[</span>--verbose<span class="o">]</span> <span class="o">[</span>--coffee<span class="o">]</span> directory
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  --color            - use color coding <span class="k">for </span>output
</span><span class='line'>  --noColor          - <span class="k">do </span>not use color coding <span class="k">for </span>output
</span><span class='line'>  -m, --match REGEXP - load only specs containing <span class="s2">&quot;REGEXPspec&quot;</span>
</span><span class='line'>  --verbose          - print extra information per each <span class="nb">test </span>run
</span><span class='line'>  --coffee           - load coffee-script which allows execution .coffee files
</span><span class='line'>  --junitreport      - <span class="nb">export </span>tests results as junitreport xml format
</span><span class='line'>  --teamcity         - converts all console output to teamcity custom <span class="nb">test </span>runner commands. <span class="o">(</span>Normally auto detected.<span class="o">)</span>
</span><span class='line'>  --runWithRequireJs - loads all specs using requirejs instead of node<span class="err">&#39;</span>s native require method
</span><span class='line'>  --test-dir         - the absolute root directory path where tests are located
</span><span class='line'>  --nohelpers        - does not load helpers.
</span><span class='line'>  -h, --help         - display this <span class="nb">help </span>and <span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>使用简单说明</strong></p>

<ul>
<li>指定目录进行单元测试：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>jasmine-node <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>注意指定的目录下的包含单元测试代码的脚本文件必须为js或者coffee格式，并且文件名最后必须为<strong>spec</strong>，比如文件：<code>userSpec.js</code>，<code>user.spec.coffee</code></p>

<ul>
<li>常用的参数简单说明

<ul>
<li>verbose 默认的结果只显示成功了多少，失败了多少，然后显示失败的信息，指定该参数后，会将所有的信息都输出</li>
<li>test-dir 指定目录的绝对路径</li>
</ul>
</li>
</ul>


<h3>如何写测试代码</h3>

<p>由于之前没怎么写过单元测试，因此对测试的理解比较肤浅，我的理解比较简单：</p>

<p><em>通过某个过程得到一个结果，然后判断是否这个结果是我们预期的。一般这样的测试，其结果应该是可以预知并且可以对结果进行判断</em></p>

<p><strong>最简单的测试代码</strong></p>

<p>好，现在我们建立一个test文件夹，从最简单的测试代码开始：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span> <span class="s1">&#39;描述一下这个单元测试&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span> <span class="s1">&#39;算数的结果总是比较容易预测&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span> <span class="mi">3</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>将这个文件命名为 simpleTestSpec.js，然后使用命令:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>jasmine-node <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>描述一下这个单元测试
</span><span class='line'>  算数的结果总是比较容易预测
</span><span class='line'>
</span><span class='line'>Finished in 0.008 seconds
</span><span class='line'>1 <span class="nb">test</span>, 1 assertion, 0 failures
</span></code></pre></td></tr></table></div></figure>


<p>现在我们故意将测试代码改为<code>expect(1+2).toEqual(0);</code>，重新运行一下，得到结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>描述一下这个单元测试
</span><span class='line'>  算数的结果总是比较容易预测
</span><span class='line'>
</span><span class='line'>Failures:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> 算数的结果总是比较容易预测
</span><span class='line'>   Message:
</span><span class='line'>     Expected 3 to equal 0.
</span><span class='line'>   Stacktrace:
</span><span class='line'>     Error: Expected 3 to equal 0.
</span><span class='line'>    at new &lt;anonymous&gt; <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:102:32<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.toEqual <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1171:29<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.&lt;anonymous&gt; <span class="o">(</span>/users/neekey/Desktop/mhevery-jasmine-node-d3dc963/spec/TestSpec.js:4:19<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.execute <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1001:15<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.next_ <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1790:31<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.start <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1743:8<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.execute <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:2070:14<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.next_ <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1790:31<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.start <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1743:8<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.execute <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:2215:14<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Finished in 0.011 seconds
</span><span class='line'>1 <span class="nb">test</span>, 1 assertion, 1 failure
</span></code></pre></td></tr></table></div></figure>


<p>上面的describe可以最为一类测试的<strong>群组</strong>，而it则是这些测试中的其中一<strong>项</strong>。而<code>expect</code>就是做一次<strong>断言</strong>。</p>

<h4>异步代码测试</h4>

<p><a href="http://pivotal.github.com/jasmine/">Jasmine</a>主要提供了三个方法来让我们实现对异步脚本的测试：</p>

<ul>
<li><strong>runs(function)</strong> 官方的说明是：<em>runs() blocks by themselves simply run as if they were called directly</em>, 觉得不是很理解，直接看代码吧，当只有一个<code>runs()</code>的情况下，下面两端代码的效果一致：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be a test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nx">foo</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be a test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">foo</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>出现多个<code>runs()</code>的时候，他们将以串行的方式执行，需要注意的是，在<code>runs()</code>指定的函数内部，<code>this</code>是被多个<code>runs()</code>共享的。
下面这个例子，多个<code>runs()</code>串行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be a test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">bar</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">bar</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">bar</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">bar</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>waits(timeout)</strong> 这个方法和<code>runs()</code>一起使用，我们可以通过该方法来指定阻塞多久再执行下一个<code>runs()</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be a test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">that</span><span class="p">.</span><span class="nx">foo</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">250</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">waits</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码在执行完第二个<code>runs()</code>后没有直接执行第三个<code>runs()</code>,知道<code>waits()</code>指定的500毫秒到达后，再执行<code>runs()</code>。利用这个方法，我们可以对一些异步回调（这些回调的返回时间可以估计）进行测试。</p>

<p>需要注意的是，如果第三个<code>runs()</code>内的代码不用runs来包裹，直接写在外面，<strong>将无法被阻塞执行。</strong></p>

<ul>
<li><strong>waitsFor(function, optional message, optional timeout)</strong> 在很多情况下，我们无法确切地知道回调的在什么时候返回（比如用户的自定义事件，鼠标点击等），这个时候我们就可以使用该方法。该方法只有在给定的function返回了<code>true</code>后才会执行下一个<code>runs()</code>，还可以指定最长等待时间，如果在这个时间内还没有返回<code>true</code>，则显示<code>optional message</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;waitsFor Test&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;after 2sec, it will be true&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">iWillBeTrue</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">iWillBeTrue</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">2000</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">waitsFor</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">iWillBeTrue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span> <span class="s2">&quot;maybe i will never be true&quot;</span><span class="p">,</span> <span class="mi">10000</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">runs</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span> <span class="nx">iWillBeTrue</span> <span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span> <span class="kc">true</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>waitsFor Test
</span><span class='line'>  after 2sec, it will be <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>Finished in 2.013 seconds
</span><span class='line'>1 <span class="nb">test</span>, 1 assertion, 0 failures
</span></code></pre></td></tr></table></div></figure>


<p>我们去掉<code>setTimeout</code>，那么应该<code>iWillBeTrue</code>将永远为<code>false</code>，重新运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>waitsFor Test
</span><span class='line'>  after 2sec, it will be <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>Failures:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> after 2sec, it will be <span class="nb">true</span>
</span><span class='line'><span class="nb">   </span>Message:
</span><span class='line'>     timeout: timed out after 10000 msec waiting <span class="k">for </span>maybe i will never be <span class="nb">true</span>
</span><span class='line'><span class="nb">   </span>Stacktrace:
</span><span class='line'>     undefined
</span><span class='line'>
</span><span class='line'>Finished in 10.921 seconds
</span><span class='line'>1 <span class="nb">test</span>, 1 assertion, 1 failure
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>总体上来说，<a href="http://pivotal.github.com/jasmine/">Jasmine</a>感觉还不错，特别是提供的这几个异步测试的方法，基本上能满足一般单元测试的需求。</p>

<p>先介绍到这，更多细节后续会跟进。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopass部署]]></title>
    <link href="http://neekey.github.com/blog/2012/01/08/octopassbu-shu/"/>
    <updated>2012-01-08T20:32:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/08/octopassbu-shu</id>
    <content type="html"><![CDATA[<p>部署可以参考：<a href="http://octopress.org/docs/setup/">Octopress Setup</a></p>

<h3>本地部署</h3>

<p><strong>首先是配置Octopress需要的环境：</strong></p>

<ul>
<li>由于Octopress需要使用到Git，因此需要先安装<a href="http://git-scm.com/">Git</a></li>
<li>ruby 1.9.2 ( 可以使用RVM或者rbenv，他们都是ruby的环境管理软件 )</li>
</ul>


<p><strong>安装RVM</strong></p>

<p>用以下命令安装：</p>

<p><code>bash &lt; &lt;(curl -s https://rvm.beginrescueend.com/install/rvm)</code></p>

<p>安装完成后，需要修改用户目录下的.bash_profile文件，将RVM设置为shell的一个function:</p>

<pre><code>echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bash_profile
source ~/.bash_profile

# If using Zsh do this instead
echo '[[ -s $HOME/.rvm/scripts/rvm ]] &amp;&amp; source $HOME/.rvm/scripts/rvm' &gt;&gt; ~/.zshrc
source ~/.zshrc
</code></pre>

<p>由于我自己对shell命令不是很熟悉，所以简单的查了一下资料。上面的命令中：</p>

<ul>
<li>echo <code>echo 'text' &gt;&gt; targetfile</code> 将text添加到目标文件尾</li>
<li>source <code>source fileHasCodeToRun</code> 执行指定文件中的脚本</li>
</ul>


<!-- more -->


<p><strong>安装ruby 1.9.2</strong></p>

<p>用安装好的rvm来安装ruby 和 <a href="http://rubygems.org/">rubygems</a>(ruby的包管理器)</p>

<pre><code>rvm install 1.9.2 &amp;&amp; rvm use 1.9.2
rvm rubygems latest
</code></pre>

<p><strong>配置Octopass</strong></p>

<p>首先将Octopass的源码clone到本地</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
ruby --version  # Should report Ruby 1.9.2
</code></pre>

<p>注意此处一定要确保<code>ruby --version</code>是1.9.2，否则后面的步骤会出错。</p>

<p>进入Octopass根目录后，安装依赖包：</p>

<pre><code>gem install bundler # 应该是一个用来管理依赖的组件(=.=)
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
</code></pre>

<p>安装完成后，再安装Octopass默认的主题：</p>

<pre><code>rake install
</code></pre>

<p>至此，本地的Octopass就差不多部署完毕了。</p>

<hr />

<h3>部署Octopass到Github Page</h3>

<p>可以直接参考官方的说明：<a href="http://pages.github.com">Github Page</a></p>

<p>简单的来说，就是：</p>

<ul>
<li>建立一个repository，命名：reponame.github.com</li>
<li>在该 repo 根目录下放置一个index.html</li>
<li>通过reponame.github.com来访问</li>
</ul>


<p>非常简单吧！当然Github Page也支持<a href="http://neekey.github.com//http://pages.github.com/#custom_domains">Custom Domain</a></p>

<p>建立好你自己的Github Page后，回到Octopass目录，使用一下命令：</p>

<pre><code>rake setup_github_page
</code></pre>

<p>这个命令将：</p>

<ul>
<li>让你输入你的Github Page的repo的url</li>
<li>Rename the remote pointing to imathis/octopress from ‘origin’ to ‘octopress’(不是很懂…这是原文)</li>
<li><p>将你的Github Page的repo的url作为默认的origin remote</p>

<p>  其实在这里，你在github上的repo对应的本地目录是Octopass/_deploy目录，这个目录下是编译后的静态文件。</p></li>
<li><p>从master分支转换到source分支</p>

<p>  我自己部署的时候发现没有这个变化。而且所谓的source，我自己认为应该是整个Octopass文件夹（里面的_deploy文件夹下的内容倒是不重要，因为每次<code>rake generate</code>都能更新）。我的做法是，<code>git init</code>整个Octopass文件夹，然后<code>add .</code>把所有文件都以<em>source</em>分支提交。</p></li>
<li><p>配置blog的url指向repo</p></li>
<li>为_deploy目录设置master分支，用户部署</li>
</ul>


<p>总之，这个命令的作用我自己还是有点<strong>confused</strong></p>

<p>然后就是生成<strong>_deploy/</strong>目录下的文件，并部署到<strong>github</strong>上:</p>

<pre><code>rake generate
rake deploy
</code></pre>

<p>那么现在的repo各分支的状态就是：</p>

<ul>
<li>master： 对应_deploy目录下的文件</li>
<li>source： 对应Octopass目录下的所有文件（但是不包括_deploy）</li>
</ul>


<p>这样我们就可以用source分支来编辑blog，使用master来发布!</p>

<p><strong>Have Fun！</strong></p>

<hr />

<p>暂时准备先用这个github的域名，过一阵子觉得真心不错的时候，再考虑直接将我的<a href="http://neekey.net/blog">neekey.net</a>指向这边好了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress]]></title>
    <link href="http://neekey.github.com/blog/2012/01/08/octopass/"/>
    <updated>2012-01-08T19:27:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/08/octopass</id>
    <content type="html"><![CDATA[<p>捣鼓了很久，终于将<a href="http://octopress.org/" title="octopress">octopress</a>部署完毕。从此摆脱Wordpress开始开始Geek式的blog生活！</p>

<p><img src="http://octopress.org/images/logo.png?1325260964" alt="OctopassLogo" /></p>

<p>octopress<strong>官方介绍</strong>：</p>

<blockquote><p>Octopress is a framework designed by Brandon Mathis for Jekyll, the blog aware static site generator powering Github Pages. To start blogging with Jekyll, you have to write your own HTML templates, CSS, Javascripts and set up your configuration. But with Octopress All of that is already taken care of. Simply clone or fork Octopress, install dependencies and the theme, and you’re set.</p></blockquote>

<p>由于本人也是刚刚接触<a href="http://octopress.org/" title="octopress">octopress</a>，了解不是很深入，我自己感觉它主要有下面这些特点：</p>

<ol>
<li>基于Ruby（所以对Ruby开发者来说非常友好）</li>
<li>支持Markdown</li>
<li><p>使用git进行版本控制</p>

<p> <a href="http://octopress.org/" title="octopress">octopress</a>本身不需要任何database，所有的数据都是静态文件，然后使用git进行维护。</p></li>
<li><p>轻松部署</p>

<p> <a href="http://octopress.org/" title="octopress">octopress</a>使用<a href="http://jekyllrb.com/" title="jekyll">Jekyll</a>静态网站产生引擎，可以轻松生成<strong>static-file based</strong>类型的网站，部署非常方便（如上面一条，不需要任何database）</p>

<p> 你可以渲染放置到自己的服务器上，<a href="http://www.heroku.com/" title="Heroku">Heroku</a>，或者是<a href="http://pages.github.com/" title="github page">Github Page</a>（我就是放到git上的，很cool吧！）上。</p></li>
<li>支持各种插件</li>
<li>支持<a href="https://gist.github.com/" title="gist">gist</a>(没用过，但是貌似很给力的样子，hoho！)</li>
<li>使用<a href="http://sass-lang.com/" title="SASS">SASS</a>，<a href="http://compass-style.org/" title="Compass">Compass</a>等新奇玩意</li>
</ol>


<p>OK！大体就是这样，具体可以直接到官网看文档。下一篇文章会详细介绍下如何部署Octopass！</p>
]]></content>
  </entry>
  
</feed>

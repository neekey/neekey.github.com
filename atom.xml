<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Neekey]]></title>
  <link href="http://neekey.github.com/atom.xml" rel="self"/>
  <link href="http://neekey.github.com/"/>
  <updated>2012-03-12T20:13:06+08:00</updated>
  <id>http://neekey.github.com/</id>
  <author>
    <name><![CDATA[neekey(niyunjian)]]></name>
    <email><![CDATA[ni184775761@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Semantic Versioning 语义化版本号]]></title>
    <link href="http://neekey.github.com/blog/2012/02/27/semantic-versioning/"/>
    <updated>2012-02-27T16:51:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/02/27/semantic-versioning</id>
    <content type="html"><![CDATA[<p><img src="http://neekey.github.com/images/posts/semanticVersion.png" alt="firefox版本号" /></p>

<p>今天在看<a href="http://www.commonjs.org/">commonJS</a>的<a href="http://wiki.commonjs.org/wiki/Packages/1.0">package</a>部分的时候，在讲到version字段的时候，建议参考<a href="http://semver.org/">Semantic Versioning</a>作为版本号的编写标准。仔细了解了下，对版本号的写法有了一些认识，翻译其中重要的部分分享下。</p>

<!--more-->


<h2>语义化版本号说明(SemVer)</h2>

<ul>
<li>使用语义化版本号的软件必须声明一个公共API。这个API可以在代码内部声明或者严格地写入文档中。不论如何，这个API必须是准确切让人用以理解的。</li>
<li>一个标准的版本号必须是<strong>X.Y.Z</strong>的形式，其中<strong>X,Y,Z</strong>都不能为负数。<strong>X</strong>是主版本，Y是副版本，Z是补丁版本。每个元素必须一次只能增加1.比如：<code>1.9.0 -&gt; 1.10.0 -&gt; 1.110</code></li>
<li>当一个主版本增加了，副版本和补丁版本必须被重置为0.当一个副版本增加，那么补丁版本必须被重置为0.比如：<code>1.1.3 -&gt; 2.00 和 2.1.7 -&gt; 2.2.0</code></li>
<li>一旦一个版本包被发布，那么这个版本的内容不能被更改。任何修改都必须重新发布一个版本。</li>
<li>主版本<strong>0</strong>（0.y.z）用于初始开发。在该阶段，任何时刻都可能发生改变。这个时候的公共API被认为是不稳固的。</li>
<li>在版本号<strong>1.0.0</strong>中定义公共API。接下版本号的改变都依赖于这个公共API的改变。</li>
<li>补丁版本号<strong>Z</strong>(x.y.Z | x > 0)必须只有在修复向下兼容的Bug时才会更新。Bug修复是指通过代码内部的修改来修正不正确的行为。</li>
<li>当向下兼容的功能被提出或者任何公共API被废弃的时候，副版本号<strong>Y</strong>(x.Y.z | x > 0 )必须被更新。当大量的新功能或者改进出现在私有代码里面，副版本号也可以更新。副版本号的更新可能包括补丁版本的更新内容。副版本号更新后，补丁版本号必须重置为0</li>
<li>当公共API出现了与向下兼容性有关的变更时，主版本号<strong>X</strong>(X.y.z | X > 0)必须被更新。它可能包含了副版本和补丁版本的变更内容。主版本更新后，副版本和补丁版本必须被重置为0</li>
<li>一个预发布的版本号可能使用在补丁版本号后面添加一个破折号和一系列的被点分割的标示符构成。这些标示符必须由ASCII码中的包含文字和数字的符号以及破折号组成[0-9A-Za-z-]。预发布版本的优先级比正常的版本号低。比如：<code>1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92</code></li>
<li>一个生成版本可能使用在补丁版本和预发布版本后面添加一个加号和一系列由破折号分隔的标示符组成。这些标示符必须由ASCII码中的包含文字和数字的符号以及破折号组成[0-9A-Za-z-]。生成版本的优先级比正常版本的优先级高</li>
<li>优先级必须通过将版本号根据主版本号，副版本号，补丁版本号，预发布版本号，生成版本号的顺序分割后进行计算。主版本，副版本，补丁版本总是通过数字大小进行比较。预发布版本和生成版本之间的比较必须通过被破折号分隔的标示符进行比较：只带有数字的版本号通过数字大小进行比较，带有字母的版本号则更具字符在ASCII表中的顺序比较优先级。数字标示符总是比非数字的标示符优先级低。比如：<code>1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0-rc.1 &lt; 1.0.0-rc.1+build.1 &lt; 1.0.0 &lt; 1.0.0+0.3.7 &lt; 1.3.7+build &lt; 1.3.7+build.2.b8f12d7 &lt; 1.3.7+build.11.e0f985a.
</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记录一些可以在茫然时马上开始做的事情]]></title>
    <link href="http://neekey.github.com/blog/2012/02/14/zai-xian-xia-shi-ke-ke-yi-zuo-de-shi/"/>
    <updated>2012-02-14T20:40:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/02/14/zai-xian-xia-shi-ke-ke-yi-zuo-de-shi</id>
    <content type="html"><![CDATA[<p>这些年，经常会有这样的时刻：刚刚做完一件大事，想利用剩下的时间，做一些<strong>正经事</strong>之外的<strong>非正经事</strong>，但是也想看看电影啊玩玩游戏什么的。然后经常在这些选择中纠结！这个弄弄，那个弄弄，反而啥都木有干。有句很简单且很有效的做事原则是：</p>

<blockquote><p>一次只做一件事</p></blockquote>

<p>但是我这个人最大的缺点就是<strong>患得患失</strong>，作为一名具有完美主义偏向的人，总是想要做一些所谓的<strong>最正确的事情</strong>。其实本身上面的事情就不需要太纠结，从容洒脱的确实是一件乐事，但是境界上需要提升，心境更是需要修养。因此今天就想，与其每次如此纠结，不如事先为这些场景做好准备。做一个列表，里面是预先准备的可以在这些时刻做的事情。当这样的时刻到来的时候，至少纠结的范围小一点（哈哈… ）。如果还是可能造成<strong>选择</strong>上的的困难，可以事先进行排序！</p>

<p>下面的列表不定期更新</p>

<ul>
<li>看一本相对轻松的小说</li>
<li>看你的文章订阅：认真地看，速度跳过不感兴趣的，认真阅读你点开的</li>
<li>可以静下心来背几个单词</li>
<li>做一些整理工作：比如整理一下你的浏览器书签，文件目录，联系人列表，邮箱里的邮件等等</li>
<li>找出几首你喜欢听的但是没有认真看过歌词的英文歌，认真查一下字典，重新理解下歌曲要表达的内容</li>
<li>打扫一下卫生，整理一下桌面，洗个衣服什么的</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[抗痘日记——泰尔丝（口服异维A酸）]]></title>
    <link href="http://neekey.github.com/blog/2012/02/12/wo-de-kang-dou-ri-ji-tai-er-si-kou-fu-yi-wei-asuan/"/>
    <updated>2012-02-12T16:08:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/02/12/wo-de-kang-dou-ri-ji-tai-er-si-kou-fu-yi-wei-asuan</id>
    <content type="html"><![CDATA[<p><img src="http://neekey.github.com/images/posts/Isotretinoin.jpg" alt="泰尔丝" /></p>

<p>在做了几个星期的准备以后，终于在昨天狠下心来，开始服用泰尔丝！我的体重是<strong>65KG</strong>，因此我打算每天吃5颗(<code>早上2颗晚上3颗</code>)，吃满<strong>6</strong>个月。在此记录这段艰难漫长的历程，希望能坚持下去！</p>

<p>根据<strong>Starui</strong>的<a href="http://bbs.trends.com.cn/viewthread.php?tid=802478&amp;extra=&amp;page=1">痘痘终极疗法泰尔丝（口服异维A酸）服药总结及战痘心得</a> ,在吃泰之前，败好了应对服药期间的副作用的护肤品和相关药物。</p>

<!--more-->


<h3>目前拥有的装备</h3>

<p><strong>用于减少副作用同时对皮肤有好处：</strong></p>

<ul>
<li>自然之宝葡萄籽提取物胶囊：抗氧化，抗衰老，对皮肤有美白去皱修复等作用</li>
<li>自然之宝复合B族维生素软胶囊：B族维生素功能很强大，其中有一条是关键，调理人体的油脂代谢，换句话说就是控油！</li>
<li>自然之宝高纯深海鱼油软胶囊：鱼油主要是针对副作用中提及的可能对肝脏功能造成一定影响</li>
</ul>


<p><strong>护肤品：</strong></p>

<ul>
<li>理肤泉痘痘清精华修复霜：主要用于出现痘痘的时候涂</li>
<li>宝拉珍选2%水杨酸焕采精华液：去角质，个人用着觉得有点小刺激</li>
<li>宝拉珍选全方位抗氧化精华：抗氧化</li>
</ul>


<p>下面是以前买的还没用完的：</p>

<ul>
<li>欧莱雅控油净爽激活水：当做爽肤水用，最近都木有用过</li>
<li>欧莱雅多重防护隔离霜（SPF30+PA+++）：之前陪同学去美容院，里面的医生推荐用隔离霜，于是就买了… 用过几次，太麻烦了，晚上还要用卸妆油！</li>
<li>欧莱雅男士控油净朗保湿露</li>
<li>欧莱雅控油净朗碳爽洁面乳：用了很多只了，感觉还好，不过药效开始发作，脸变干后估计就会太刺激了，准备用完了败<strong>痘痘清gel</strong>（还有用来保湿的<strong>黄油gel</strong>… 哎，最近弹尽粮绝了，下个月继续！）</li>
</ul>


<p><strong>药物：</strong></p>

<ul>
<li>班赛-过氧苯甲酰凝胶</li>
<li>泰尔丝（口服异维a酸）</li>
</ul>


<h3>服药前的皮肤状况</h3>

<p>其实本人与痘痘抗争这么多年，目前的状态来也不算很严重。基本上处于痘痘会在额头，下巴两腮等地时不时地长一两颗的那种类型（当然有时候会一下子爆很多出来），脸上痘印比较严重，额头基本上是炎性痘痘留下的红印，然后两腮有比较明显的暗红色痘印（不知道算不算是<strong>结节</strong>，反正摸上去凹凸不平，求科普….）</p>

<p>服药前的一周左右开始服用葡萄籽提取物，B族维生素和鱼油（每天3葡萄2鱼油1B），不知道是天气（杭州这边冬天真心冷！）的原因还是B起效了，皮肤开始变得没有那么油腻，并且部分位置（比如眼周和太阳穴位置）变得有点小干，整张脸的气色似乎也比原来好些（葡萄籽的功效？或许只是心里作用）。</p>

<p>脸上额头部分有过年在家长的炎性痘痘消下去的红印，右边太阳穴部分有一颗较大的炎性痘痘。不过在班赛的控制下，颜色已经按下去，呈现好转趋势。出了痘痘部分早晚涂班赛外，额头下巴和右边脸颊部分也会抱着预防的考虑去上班赛，所以这几个部分皮肤较干燥，有蜕皮的现象出现。</p>

<h2>下面开始服药记录</h2>

<h3>2012-02-11</h3>

<p>第一天服用，心情很忐忑！！暂时木有任何感觉，但是有轻微的心理压力。今天重新看了一下<strong>Starui</strong>的帖子，决定以后宝拉2%水杨酸每天晚上用一次，之前都是早晚一次，感觉太刺激了。</p>

<p>由于已经开始使用泰尔丝，因此暂时雪藏班赛（怕太刺激），换上理肤泉的痘痘清精华修复霜。</p>

<h3>2012-02-12</h3>

<p>早上起来第一件事就是摸摸额头摸摸鼻子和下巴，发现额头很干然后有很多皮屑，但是这不能表明是泰尔丝的作用，因为发现痘痘清修复霜涂完以后会有很明显的类似皮屑的东西产生（在写这篇文章的时候，又摸了一下额头，微油，看来确实是修复霜的关系），鼻翼两侧依旧能摸到明显的油。</p>

<p>今天比较有感觉的是嘴唇有干的感觉。</p>

<h3>2012-02-13</h3>

<p>今天基本上和昨天的状况差不多，今天去见我父母，结果居然让我晚上睡在他们那… 好在药是带了，可惜护肤品没带啊！</p>

<h3>2012-02-14</h3>

<p>今天早上还在床上睡觉的时候突然觉得前胸和后背有点痒，不知道是不是和药效有关？不过起来后就没太大感觉了。早起来没有洁面用品，所以只能直接用清水洗面。</p>

<p>今天感觉脸的蜕皮稍微更加明显了一点，不过到旁晚开始脸摸起来又开始挺油的感觉（不知道是不是因为早上没有清洁皮肤的关系），然后油混杂着皮屑，就觉得脸脏脏的… 手忍不住要去摸啊… 现在在图书馆，等不及想回寝室洗脸了…</p>

<h3>2012-02-15</h3>

<p>今天返油比昨天脸好像又油了一点，估计就是传说中的<strong>返油</strong>吧（由于皮肤太过干燥，所以皮肤会加大油脂的分泌）。嘴唇更加干了，好在今天中午理肤泉的嘴唇修复膏到了。感觉这只唇膏的设计很奇葩… 文字不好描述，有兴趣的可以自己百度。吐了唇膏嘴唇状况好一点。</p>

<p>同时今天又去百度的<strong>泰尔丝吧</strong>逛了一圈，直到一件很重要的事：</p>

<p>服药期间<strong>不要喝酒！！</strong>因为泰尔丝对于油脂的减少是通过血液将多余的油脂排出的，而血液中的油脂被剔除是经过肝脏，所以泰尔丝的副作用之一就是对肝脏有一定影响（加重了其工作强度）。而酒精是靠肝脏来消化的，无疑会加重这份伤害。同时酒精会和异维a酸发生反应产生一种物质，这种物质会延长异维a酸在人体的代谢！</p>

<p>所以<strong>不要喝酒！！</strong></p>

<h3>2012-02-18</h3>

<p>这两天脸一直处于微油状态，感觉第二盒的效果没有第一盒那么明显啊！然后右边太阳穴下面的那颗炎性（or囊肿性？反正就红红的一个大包，里面鼓鼓的）痘痘一直没有明显褪下去，开始质疑理肤泉痘痘清修复霜的作用啊，于是昨天就开始重新换成班赛了（因为之前是怕皮肤会很干，怕班赛加重脸的负担，但是暂时现在脸还好…）</p>

<p>然后这两天人中和下巴部分白头开始变严重。怎么说呢，我人中和下巴（下嘴唇下方一点）部分一直有（包括服药前）那种一个白白的很大个的毛孔，但是需要我把皮肤拉伸开（难以形容…因为这两个部位皮肤比较多…）才会看到。这两天开始变严重了… 有点蛋疼啊，不知道这样的白头该怎么处理。目前我每天涂宝拉珍选的水杨酸去角质时，会对这个部位再多涂一点，然后同时也会在这个部位涂班赛。</p>

<p>看效果啦！</p>

<p>明天开始第三盒啦，希望药效明显一点！</p>

<h3>2012-02-19</h3>

<p>今天开始吃第三盒，发现明显脸干了很多（怀疑第二盒的质量了… ）</p>

<p>另外今天还出现一个比较明显的情况是手背变得很干，右手一小块部分因为太干有点开裂了（在外面的时候发现的，直接涂点唇膏上去了= =#效果蛮好的）</p>

<h3>2012-02-21</h3>

<p>从19号就开始右边脸（特别是太阳穴位置，我重点关注的痘区），变得很红！而且摸起来硬硬的！！！泪流满面啊… 忐忑啊，而且很奇怪的是只有右边脸（确切地说就是之前有每天涂班赛的区域）有这个反应！我在怀疑是不是过敏了… 反正马上就把班赛听了，于是这几天洗完脸之后就什么也没涂了（宝拉珍选的去角质水杨酸也不敢涂了，因为之前每次涂了都会有点刺激，怕加重了）。于是这几天右边脸都是皮屑啊，蜕皮很严重。而左边脸却只有微微的脱皮！希望过两天会褪下去啊…</p>

<p>另外人中部分的白头（应该是闭口吧，很大的一颗… ）越来越大了，但是还没有成熟的迹象！表示真心看不惯啊… 今天晚上洗完脸，实在是忍不住，拿了美容针轻轻的刺了一下，但是没有想想中的白色流出来而是流了一点血出来… 轻轻的挤也没有要出来的迹象… 不甘心，手贱继续用美容针的圈圈勒它(整个白头比我的钢圈大很多)… 依旧无效，反而把整个白头弄的很红啊… 作罢，还是耐心，等它成熟了再灭它吧。</p>

<p>这几天的状况，着实让人感到有点沮丧啊，相比我觉得所谓的副作用之一的“抑郁症”就是这么积累出来的吧！表示必须坚持，要淡定啊！！这才吃了11天而已！决定以后每天尽量少照镜子。</p>

<p>给自己少一些压力，至少服药期间的生活，要以开心为主！！</p>

<h3>2012-02-23</h3>

<p>这两天右边脸上红红的硬块基本上消下去了，看来是过敏。果然药膏什么的虽然有效也不能滥用！昨天买的倩碧黄油GEL终于到了，早上洗完脸试了一下，今天一天脸都不干，而且摸起来滑滑的，感觉不错，继续用看看效果。</p>

<p>另外这两天还有一个感觉是眼睛有点累或者说干（不过由于要上班，从早上9多开始都要对着电脑，应该也有关系），看来以后要注意眼睛的休息了。</p>

<h3>2012-02-27</h3>

<p>最近脸的情况还算稳定。皮肤状况基本上处于干性，就是从早到晚，脸上没油（顶多摸上去看到微微的有光吧）。然后从开始吃到现在，右边太阳穴的那颗痘痘一直没油完全好啊… 表示班赛和痘痘清都不给力啊，预示前天开始拿出在家里的人民医院皮肤科开的药水（一个玻璃瓶子，上面贴着外用药… 尼玛）.只能先观望观望了。</p>

<p>另外还有比较纠结的就是上面提过的长在人中位置的很大的白头… 完全没有成熟的迹象，这个比较愁人。暂时不知道怎么办。</p>

<p>从昨天开始鼻子下面左边边上又冒出一个很大很大的白头，不过是那种很明显的突出，今天越长越大，准备下班会寝室就果断挤掉。</p>

<p>现在每天晚上是轻柔地洗脸，然后涂2%宝拉珍选水杨酸，然后涂祛痘的药膏/药水,然后用倩碧黄油。早上省掉水杨酸这一步。基本上我觉得还是挺简单了。</p>

<p>唯一不爽的就是嘴唇每天依旧非常干，唇膏要涂无数次啊!!!!</p>

<h3>2012-03-12</h3>

<p>隔了这么久才更新，只能说毅力不够。</p>

<p>这段时间倒是没有什么大变化，主要问题还是嘴唇和一直长在脸上的痘痘。</p>

<p>因为嘴唇的问题，上周六去了一下市三医院皮肤科，跟医生说明了我的情况（我说我在吃泰尔丝，医生貌似没什么反应=。=很淡定），然后问我有没有用唇膏，我说有，理肤泉的。医生说：“那已经很好了”，于是给我开了维生素E尿囊乳膏，每天早晚涂在嘴唇上。然后又向医生证实了右边太阳穴那边的那个一直不消的痘痘，却是是囊肿。医生说，如果再大一点，可以到医院来弄破，引流。</p>

<p>然后我又问了一下人中部分的类似白头的痘痘，医生也没说清楚这个是什么，不过配了复方维A酸凝胶，让每天晚上一次点按在人中这边，主要是加速蜕皮，让白色的东西早点能出来。</p>

<p>其实今天去医院主要目的是做一下肝功能，毕竟吃药已经有一个月了。结果早上忘了，居然吃了早餐，没法做。医生人挺好，跟我说肝功能算是基础检查，我可以在学校附近的医院做，都一样的。后来在学校边上的一家小一点的医院做了检查。</p>

<p>今天拿到结果，正常！哈哈。心里踏实了许多。</p>

<p>说说医生给的两款新药物吧。</p>

<p>首先是涂嘴唇的药膏，说实话，感觉挺有效的。周六开始涂的，周日基本上原来的旧皮就脱光了。而且涂了以后嘴唇是一直处于那种湿乎乎黏黏的状态，包括死皮也处于那种状态。今天嘴唇虽然还是感到干，但是至少看起来正常了。</p>

<p>然后维A酸的药膏，这个东西的效果有待检验，主要是使用起来比较麻烦。因为维A酸见光容易分解，因此涂到脸上以后要马上关灯，所以现在都是要上床了涂。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby学习笔记(一)]]></title>
    <link href="http://neekey.github.com/blog/2012/02/09/rubyxue-xi-bi-ji-1/"/>
    <updated>2012-02-09T22:18:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/02/09/rubyxue-xi-bi-ji-1</id>
    <content type="html"><![CDATA[<p><img src="http://neekey.github.com/images/posts/ruby_logo.gif" alt="ruby" /></p>

<p>今天…闲来无事，去看了一下<a href="http://www.ruby-lang.org">Ruby</a>,因为Octopress是用<a href="http://www.ruby-lang.org">Ruby</a>写的，有必要学习一下<a href="http://www.ruby-lang.org">Ruby</a>。</p>

<p>直接到官网上去，发现<a href="http://www.ruby-lang.org">Ruby</a>非常友好，最下方有中文版本的选择，不过感觉翻译的有点蹩脚，还是直接看英文吧。首页右边有常用的几个入口，比如<a href="http://www.ruby-lang.org/en/downloads/">下载</a>，<a href="http://www.ruby-lang.org/en/documentation/quickstart/">二十分钟学习ruby</a>，<a href="http://tryruby.org/">在浏览器里尝试Ruby</a>(这个页面非常有爱，见下图)</p>

<!--more-->


<p><img src="http://neekey.github.com/images/posts/try_ruby_in_browser.png" alt="ruby" /></p>

<p>很认真的花了20分钟看了<a href="http://www.ruby-lang.org/en/documentation/quickstart/">二十分钟学习ruby</a>，对<a href="http://www.ruby-lang.org">Ruby</a>算是有了一定的认识，总结一下：</p>

<h3><strong>Interactive Ruby</strong></h3>

<p>翻译成中文应该是可交互的<a href="http://www.ruby-lang.org">Ruby</a>，其实是可以让你在终端中执行ruby的程序，在Mac下直接在终端中输入<code>irb</code>就行了。然后尽情的尝试吧。</p>

<h3><strong>控制台信息输出</strong></h3>

<p>就是所谓的<code>print</code>之类的方法，在<a href="http://www.ruby-lang.org">Ruby</a>中是<code>puts</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="nb">puts</span> <span class="s2">&quot;hello world&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">hello</span> <span class="n">world</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>基本的简单语法</strong></h3>

<ul>
<li>nil: 指的是<a href="http://www.ruby-lang.org">Ruby</a>中的空值</li>
<li>简单的计算：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="mi">2</span><span class="o">+</span><span class="mi">3</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">2</span><span class="o">*</span><span class="mi">3</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>变量赋值：<a href="http://www.ruby-lang.org">Ruby</a>中的变量不需要声明</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;hello world&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nb">puts</span> <span class="n">a</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">hello</span> <span class="n">world</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>调用方法: 调用方法和传参的方式比较随意，下面几种都可以。如果方法不需要参数，则括号可加可不加。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">3</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span> <span class="mi">9</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>字符串只能用双引号</strong></li>
</ul>


<h3><strong>定义方法</strong></h3>

<p>先看例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span><span class="k">def</span> <span class="nf">h</span> <span class="p">(</span> <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;world&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span><span class="nb">puts</span> <span class="s2">&quot;hello </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="o">&gt;</span><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的例子定义了一个叫<code>h</code>的方法，该方法输出<code>hello world</code>。用<code>def</code>来表示一个方法定义的开始，<code>end</code>来表示定义的结束。其中<code>hello #{name}</code>和js中的模板引擎语法类似，其中的name可以调用自己的方法，比如需要让输出首字母大写，可以修改为<code>hello #{name.capitalize}</code></p>

<h3><strong>类</strong></h3>

<h4>类的定义</h4>

<p>先看例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Greeter</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span> <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;world&quot;</span> <span class="p">)</span>
</span><span class='line'>      <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say_hi</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Hi </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say_bye</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Bye </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>类的定义由<code>class</code>关键字来声明，然后在<code>end</code>之前可以定义各种方法。上面的例子中<code>initialize</code>为构造函数，<code>@name</code>为定义的私有属性。注意到类中的方法都可以直接利用<code>@name</code>来访问该属性。</p>

<h4>实例化</h4>

<p>结合上面的代码和下面的代码，可知<code>name</code>无法直接访问，下面的例子由于访问<code>name</code>而报错：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">g</span> <span class="o">=</span> <span class="no">Greeter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="s2">&quot;neekey&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">say_hi</span><span class="p">()</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Hi</span> <span class="n">neekey</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="no">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`name&#39; for…</span>
</span></code></pre></td></tr></table></div></figure>


<h4>判断类实例是否具有某方法</h4>

<p>其实<code>class</code>定义的类本身已经继承了很多方法，我们可以通过下面的两种方式来查看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="no">Greeter</span><span class="o">.</span><span class="n">instance_methods</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;inspect&quot;</span><span class="p">,</span> <span class="s2">&quot;taguri&quot;</span><span class="p">,</span> <span class="s2">&quot;tap&quot;</span><span class="p">,</span> <span class="s2">&quot;clone&quot;</span><span class="p">,</span> <span class="s2">&quot;public_methods&quot;</span><span class="p">,</span> <span class="s2">&quot;__send__&quot;</span><span class="p">,</span> <span class="s2">&quot;taguri=&quot;</span><span class="p">,</span> <span class="s2">&quot;instance_variable_defined?&quot;</span><span class="p">,</span> <span class="s2">&quot;equal?&quot;</span><span class="p">,</span> <span class="s2">&quot;freeze&quot;</span><span class="p">,</span> <span class="s2">&quot;say_hi&quot;</span><span class="p">,</span> <span class="s2">&quot;extend&quot;</span><span class="p">,</span> <span class="s2">&quot;send&quot;</span><span class="p">,</span> <span class="s2">&quot;methods&quot;</span><span class="p">,</span> <span class="s2">&quot;hash&quot;</span><span class="p">,</span> <span class="s2">&quot;dup&quot;</span><span class="p">,</span> <span class="s2">&quot;object_id&quot;</span><span class="p">,</span> <span class="s2">&quot;instance_variables&quot;</span><span class="p">,</span> <span class="s2">&quot;eql?&quot;</span><span class="p">,</span> <span class="s2">&quot;to_yaml&quot;</span><span class="p">,</span> <span class="s2">&quot;say_bye&quot;</span><span class="p">,</span> <span class="s2">&quot;instance_eval&quot;</span><span class="p">,</span> <span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="s2">&quot;singleton_methods&quot;</span><span class="p">,</span> <span class="s2">&quot;taint&quot;</span><span class="p">,</span> <span class="s2">&quot;frozen?&quot;</span><span class="p">,</span> <span class="s2">&quot;instance_variable_get&quot;</span><span class="p">,</span> <span class="s2">&quot;to_enum&quot;</span><span class="p">,</span> <span class="s2">&quot;instance_of?&quot;</span><span class="p">,</span> <span class="s2">&quot;display&quot;</span><span class="p">,</span> <span class="s2">&quot;to_a&quot;</span><span class="p">,</span> <span class="s2">&quot;h&quot;</span><span class="p">,</span> <span class="s2">&quot;to_yaml_style&quot;</span><span class="p">,</span> <span class="s2">&quot;type&quot;</span><span class="p">,</span> <span class="s2">&quot;instance_exec&quot;</span><span class="p">,</span> <span class="s2">&quot;protected_methods&quot;</span><span class="p">,</span> <span class="s2">&quot;==&quot;</span><span class="p">,</span> <span class="s2">&quot;===&quot;</span><span class="p">,</span> <span class="s2">&quot;instance_variable_set&quot;</span><span class="p">,</span> <span class="s2">&quot;enum_for&quot;</span><span class="p">,</span> <span class="s2">&quot;kind_of?&quot;</span><span class="p">,</span> <span class="s2">&quot;respond_to?&quot;</span><span class="p">,</span> <span class="s2">&quot;to_yaml_properties&quot;</span><span class="p">,</span> <span class="s2">&quot;method&quot;</span><span class="p">,</span> <span class="s2">&quot;to_s&quot;</span><span class="p">,</span> <span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;private_methods&quot;</span><span class="p">,</span> <span class="s2">&quot;=~&quot;</span><span class="p">,</span> <span class="s2">&quot;tainted?&quot;</span><span class="p">,</span> <span class="s2">&quot;__id__&quot;</span><span class="p">,</span> <span class="s2">&quot;untaint&quot;</span><span class="p">,</span> <span class="s2">&quot;nil?&quot;</span><span class="p">,</span> <span class="s2">&quot;is_a?&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面输出了类<code>Greeter</code>拥有的全部方法，我们也可以通过给<code>instance_methods</code>传递<code>false</code>来指定只显示自己定义的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Greeter</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;say_hi&quot;</span><span class="p">,</span> <span class="s2">&quot;say_bye&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以使用<code>respond_to?</code>(函数名可以直接用?有木有！)来检查一个实例对象是否具有某个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="s2">&quot;say_hi&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<h4>类的动态特性</h4>

<p>在类已经定义完成后，我们还可以继续对类进行修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Greeter</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码对class进行了修改，使得<code>name</code>可以被访问，注意上面的代码并未覆盖原有定义，而是<strong>增加</strong>了定义。并且这些修改将马上在新的实例化对象和<strong>已经实例化</strong>的对象身上起作用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;neekey&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;nic&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">nic</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的例子来看，似乎<code>name</code>已经从私有变成了公共可被外部访问了（不知道ruby里面是否存在这样的术语）。但是真的是这样么？我们继续看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="s2">&quot;name=&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，其实通过<code>attr_accessor</code>的定义，<strong>不是</strong>将name变成所谓的<code>公有属性</code>，而是添加了该属性的<code>getter</code>和<code>setter</code>，完全可以用下面的方式来写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">name</span><span class="p">()</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">nic</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">name</span><span class="o">=</span><span class="p">(</span><span class="s2">&quot;neekey&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">neekey</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外从构造函数中的<code>@name=name</code>一句可以看到，<a href="http://www.ruby-lang.org">Ruby</a>的属性是可以动态添加的。</p>

<p>上面就是教程的大体内容。有时间继续学习~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012必须要是一个充满改变的年份啊！]]></title>
    <link href="http://neekey.github.com/blog/2012/02/08/2012bi-xu-yao-shi-yi-ge-chong-man-gai-bian-de-nian-fen-a/"/>
    <updated>2012-02-08T17:55:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/02/08/2012bi-xu-yao-shi-yi-ge-chong-man-gai-bian-de-nian-fen-a</id>
    <content type="html"><![CDATA[<p><img src="http://neekey.github.com/images/posts/mengmao1.jpg" alt="萌图啊" /></p>

<p>转眼间就过完年，已经回到学校，都二月份了。趁着还不算太晚，在此把今年希望完成的和实现的东东列举一下，自勉!</p>

<!--more-->


<h3>技术</h3>

<p>作为一名程序员，技术是必须不断提高的！</p>

<ul>
<li>对Javascript基础知识来一次全面的回顾和总结

<ul>
<li>语言基础</li>
<li>语言级别的常用方法</li>
<li>浏览器相关的各种对象与方法</li>
<li>兼容性总结</li>
</ul>
</li>
<li>HTML5方面，可以进行各种小demo的实践</li>
<li>nodeJS继续学习。尝试更多的小应用</li>
<li>继续实践单元测试

<ul>
<li>后端nodeJS单元测试</li>
<li>前端单元测试实践</li>
</ul>
</li>
<li>改进开发思维，多思考！学会<strong>迭代开发</strong>！</li>
<li>学习<strong>shell &amp; ruby</strong>来写些简单的脚本，用于处理文本/文件，提高平时的工作效率</li>
<li>最后一点也是很重要的要求：多积累和总结，静下心来多看看书！</li>
</ul>


<h3>技术个人网站</h3>

<p>博客现在用的是<a href="http://octopress.org">Octopress</a>，其实博客功能本身很简单，还有很大的DIY空间。</p>

<ul>
<li>使用<a href="http://sass-lang.com/">SASS</a>修改网站样式</li>
<li>添加订阅功能</li>
</ul>


<p>然后在<a href="http://neekey.net">neekey.net</a>上做些有意思的应用吧，可以尝试PHP的一些其他方面的方法：</p>

<ul>
<li>文件处理</li>
<li>图像处理</li>
<li>通信</li>
</ul>


<h3>英语</h3>

<p>先别说好多技术资料都是英文的，英语不好看起来泪流满面。何况心里还有一个出国的梦呢，英语不学好，能行么？</p>

<ul>
<li>单词！不求别的，尼玛今年务必把六级单词先背背熟啊！(靠RP六级已过…)</li>
<li>口语！至少把<a href="http://www.douban.com/note/133888998/">Rosetta Stone</a>课程上完</li>
<li>英文歌词！英文歌听了无数，但是这么多年，就没有认认真真读过歌词。所以尽量把每首歌的歌词看一遍，最好能记下来，也方便唱。</li>
</ul>


<h3>写作</h3>

<p>其实内心深处还是有很强烈的表达欲望的，但是文笔已经完全不行了，也没了初中高中的时候写QQ日志的那种激情。对自己的要求：</p>

<ul>
<li>每个月能写一片非技术类的文章。写的好坏没关系，反正…目前来说这个博客没多少流量= =#</li>
<li>今年至少看四本文学作品</li>
<li>平时对周围的生活实事多观察多思考，养成随手记下想法的习惯</li>
</ul>


<h3>旅行</h3>

<p>由于今年在时间和金钱上都不是很充裕，而且本身自己的旅游经验就很少，因此今年关于旅游的期望是：短途（杭州周边，甚至杭州都可以），二到三次。然后，可以考虑一个人去。</p>

<h3>声乐</h3>

<p>每次在寝室里都能唱的很嗨，高音都能控制的很好。但是每次去KTV就萎了！真心不爽，而且本身就喜欢唱歌，所以最好今年能去报个专业的声乐班（或者找个老师）</p>

<h3>游泳</h3>

<p>第一次去深水区，就被救生员吆喝上岸…这种耻辱一辈子忘不了啊！今年必须能熟练游泳！</p>

<h3>牙套</h3>

<p>再不戴牙套，人都老了。这个东西早点开始就早点结束。不过由于经济条件有限，下半年吧，但是至少今年要开始戴起来！</p>

<h3>健身</h3>

<p>我很早就发现，我和我哥一样，体重一增加，脸就会变大T T，所以健身是增加体重但是脸不变大的方式之一。当然最重要的还是增强体质！把胸肌炼实在了，还能避免气胸啊！最好能找个朋友一起去坚持去健身房。</p>

<h3>护肤</h3>

<p>泪流满面的问题，痘痘长了这么多年，今年必须有突破啊！下了狠心，也败了很多相关护肤品，今年准备服用泰尔丝了！希望能坚持下来，也希望副作用没有想象中那么可怕！等开始吃了，发一篇每日更新的日志！</p>

<h3>态度</h3>

<ul>
<li>更加尊重他人</li>
<li>做事更加的专注</li>
<li>沉稳</li>
<li>积极乐观</li>
<li>做自己</li>
</ul>


<h3>其他</h3>

<ul>
<li>重构机械学院网站。虽然早就离开创E网络了，但是这个网站以后还是需要传承下来继续维护的。所以希望在毕业前能完成重构！同时也能对PHP更加熟练，还能赚点外快…嗯嗯。</li>
</ul>


<p><strong>先这些，想到啥再添加上去！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phoneGap+nodejs图片上传(二)]]></title>
    <link href="http://neekey.github.com/blog/2012/01/31/phonegap-plus-nodejstu-pian-shang-chuan-2/"/>
    <updated>2012-01-31T16:50:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/31/phonegap-plus-nodejstu-pian-shang-chuan-2</id>
    <content type="html"><![CDATA[<p>上一篇文章已经介绍了客户端（phoneGap）中图片上传的相关技术。下面介绍服务器端（nodejs）对图片上传的处理。</p>

<p>在对服务器端这边进行编码之前，在网上找了几篇关于nodejs处理文件上传的文章，基本上是使用<a href="https://github.com/visionmedia/connect-form">Connect Form</a>这个模块，但是实际调试的时候发现异常。仔细看了一下这个模块的说明，原来目前已经被废弃，并最终会被移除。对于文件上传的处理，<code>bodyParser()</code>目前已经直接支持。</p>

<!--more-->


<h3>上传文件信息获取</h3>

<p>因此，对于文件上传的处理，首先需要引入<code>bodyParser()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">bodyParser</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后通过<code>req</code>中的<code>files</code>，根据文件的字段名来获取上传的文件信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span> <span class="s1">&#39;/upload&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span> <span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">image</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">files</span><span class="p">.</span><span class="nx">image</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">image</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">image</span><span class="p">.</span><span class="nx">path</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">image</span><span class="p">.</span><span class="nx">length</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">image</span><span class="p">.</span><span class="nx">filename</span> <span class="p">);</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">image</span><span class="p">.</span><span class="nx">mime</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码<code>req.files.image</code>中的<code>image</code>是我在客户端中指定的字段名，然后我们可以通过这个文件信息对象，获取到文件保存到服务器端的路径(<code>path</code>),文件的大小(<code>length</code>),文件名(<code>filename</code>),文件的MIME值(<code>mime</code>)。</p>

<h3>图片类型验证</h3>

<p>通过上面的信息，我们可以利用<code>fs</code>模块，对图片进行重命名等操作。但是在介绍客户端中的上传时，提到过，我们利用phoneGap选取文件的时候，无法获取文件的类型信息（MIME类型甚至没有后缀名）。因此在服务器端，我们不能仅仅凭借客户端发送过来的MIME值来验证文件类型。</p>

<p>解决这个问题最根本的方法是解析二进制的文件头，借此来判断文件的实际类型。根据这个需求，我写了一个简单的模块<a href="https://github.com/neekey/gettype">gettype</a>.</p>

<p>这个模块的API非常简单,给定文件的路径，然后文件类型会在回调函数中作为参数返回。不过因为自身需求有限，暂时只支持常用图片类型<code>JPEG|PNG|BMP|GIF</code>的判断。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">GetType</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span> <span class="s1">&#39;getType&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pathToParse</span> <span class="o">=</span> <span class="s1">&#39;images/jpeg.jpg&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">GetType</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span> <span class="nx">pathToParse</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">type</span> <span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="nx">err</span> <span class="p">){</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;file format parse error!&#39;</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;file format is : &#39;</span> <span class="o">+</span> <span class="nx">type</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成了上面两部，基本上后端这边主要的技术难点就解决了，接下来还需要完成：</p>

<ul>
<li>结合上面两个技术点做文件的大小和类型验证</li>
<li>文件重命名</li>
<li>将文件信息写入到数据库</li>
<li>想客户端返回结果</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phoneGap+nodejs图片上传(一)]]></title>
    <link href="http://neekey.github.com/blog/2012/01/26/phonegap-plus-nodejstu-pian-shang-chuan-1/"/>
    <updated>2012-01-26T17:13:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/26/phonegap-plus-nodejstu-pian-shang-chuan-1</id>
    <content type="html"><![CDATA[<p><strong>继续捣鼓毕设！</strong></p>

<p>前两天将登陆和注册这些通用功能搞定后，现在需要解决从手机端上传图片到服务器的需求。先来一张目前登陆界面截图吧：</p>

<p><img src="http://neekey.github.com/images/posts/st_login.jpg" alt="secondaryTrading_login" /></p>

<p>手机上传图片的功能主要有两方面:</p>

<ul>
<li>客户端，phoneGap是否提供了接口可以让用户选择图片以及拍照上传。选择了图片后的上传方式又是如何。</li>
<li>服务器端，主要是接受客户端的请求，对图片信息进行验证和保存。</li>
</ul>


<!--more-->


<h2>phoneGap</h2>

<p><em>注意，下面的代码实例在android中运行正常，但是不同平台可能会有区别，具体应用中，请仔细阅读API后面对不同平台的Hack!!</em></p>

<p>好，回到主题！phoneGap这边主要分成两块内容</p>

<h3>一、图片的获取</h3>

<p>图片的获取主要靠API中的Camera对象</p>

<p><strong>Camera</strong></p>

<blockquote><p>The camera object provides access to the device&#8217;s default camera application.</p></blockquote>

<p>Camera对象提供了方法来调用系统默认的拍照程序。</p>

<p>Camera对象只有一个方法<code>getPicture</code>,通过给定options，可以指定返回图片的<code>base64编码字符串</code>或者图片的本地URI。</p>

<p><strong>getPicture</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Camera</span><span class="p">.</span><span class="nx">getPicture</span><span class="p">(</span> <span class="nx">cameraSuccess</span><span class="p">,</span> <span class="nx">cameraError</span><span class="p">,</span> <span class="p">[</span> <span class="nx">cameraOptions</span> <span class="p">]</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>cameraOptions</strong></p>

<ul>
<li>quality: 保存的图片质量（个人觉得应该是指拍照的情况），数字，范围为：0-100</li>
<li>destinationType: 选择返回的图片数据格式。<code>URI</code>或者是<code>base64 encoded string</code>,这两个值定义如下：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Camera</span><span class="p">.</span><span class="nx">DestinationType</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">DATA_URL</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>                <span class="c1">// Return image as base64 encoded string</span>
</span><span class='line'>  <span class="nx">FILE_URI</span> <span class="o">:</span> <span class="mi">1</span>                 <span class="c1">// Return image file URI</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>sourceType: 设置图片的来源，拍照或者从图库中寻找（但是实际有三种选项，<code>PHOTOLIBRARY</code>和<code>SAVEDPHOTOALBUM</code>和区别不是很清楚哈～）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Camera</span><span class="p">.</span><span class="nx">PictureSourceType</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">PHOTOLIBRARY</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">CAMERA</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">SAVEDPHOTOALBUM</span> <span class="o">:</span> <span class="mi">2</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>allowEdit: 允许在图片被确认选择前进行简单的编辑</li>
<li>EncodingType: 设置照片的格式（应该是针对拍照的情况）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Camera</span><span class="p">.</span><span class="nx">EncodingType</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">JPEG</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>               <span class="c1">// Return JPEG encoded image</span>
</span><span class='line'>  <span class="nx">PNG</span> <span class="o">:</span> <span class="mi">1</span>                 <span class="c1">// Return PNG encoded image</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>targetWidth: 设定图片的宽度</li>
<li>targetHeight: 设定图片的高度</li>
<li>MediaType: 设置可以选取的文件类型（可以是只有图片，只有视频，或者都可以），这个选项只有在<code>sourceType</code>不是<code>Camera.PictureSourceType.CAMERA</code>才起作用</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Camera</span><span class="p">.</span><span class="nx">MediaType</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">PICTURE</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>             <span class="c1">// allow selection of still pictures only. DEFAULT. Will return format specified via DestinationType</span>
</span><span class='line'>    <span class="nx">VIDEO</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>               <span class="c1">// allow selection of video only, WILL ALWAYS RETURN FILE_URI</span>
</span><span class='line'>    <span class="nx">ALLMEDIA</span> <span class="o">:</span> <span class="mi">2</span>            <span class="c1">// allow selection from all media types</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>代码示例</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">navigator</span><span class="p">.</span><span class="nx">camera</span><span class="p">.</span><span class="nx">getPicture</span><span class="p">(</span><span class="nx">onSuccess</span><span class="p">,</span> <span class="nx">onError</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">quality</span><span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">destinationType</span><span class="o">:</span> <span class="nx">Camera</span><span class="p">.</span><span class="nx">DestinationType</span><span class="p">.</span><span class="nx">FILE_URI</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">sourceType</span><span class="o">:</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">camera</span><span class="p">.</span><span class="nx">PictureSourceType</span><span class="p">.</span><span class="nx">PHOTOLIBRARY</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">onSuccess</span><span class="p">(</span> <span class="nx">imageURI</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span> <span class="nx">imageURI</span> <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">onError</span><span class="p">(</span> <span class="nx">msg</span> <span class="p">){</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span> <span class="s1">&#39;图片获取失败:&#39;</span> <span class="o">+</span> <span class="nx">msg</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意下面设置返回为图片的URI，除此之外没有其他参数。图片URI大概是这个样子：
<code>content://media/external/images/media/4</code>
我们将这段<code>URI</code>设置给<code>img</code>元素的<code>src</code>属性来实现本地图片，但是除此之外，<strong>貌似无法知道图片的具体格式</strong>，所以后面会涉及到后端nodejs的后端校验。</p>

<h3>二、图片上传</h3>

<p>上面介绍了如何让用户选取图片，下面介绍下文件的上传。</p>

<p>phoneGap中封装了对手机中的文件进行操作的一些常用方法。其中<code>FileTransfer</code>对象允许你通过调用其实例对象的<code>upload</code>方法将本地文件上传到服务器。</p>

<p><code>FileTransfer</code>使用<code>HTTP multi-part POST</code>请求. 支持<code>HTTP</code>和<code>HTTPS</code>协议. 可以通过传递一个<code>FileUploadOptions</code>对象到<code>upload</code>方法，来设置上传相关的参数.</p>

<p><strong>upload</strong>方法的具体使用直接看代码吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileUploadOptions</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ft</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileTransfer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">options</span><span class="p">.</span><span class="nx">fileKey</span><span class="o">=</span> <span class="s1">&#39;image&#39;</span><span class="p">;</span>    <span class="c1">// 相当与表单中的name字段</span>
</span><span class='line'><span class="nx">options</span><span class="p">.</span><span class="nx">fileName</span><span class="o">=</span> <span class="s1">&#39;图片名称&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">options</span><span class="p">.</span><span class="nx">mimeType</span><span class="o">=</span> <span class="s2">&quot;image/png&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">options</span><span class="p">.</span><span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">field1</span><span class="o">:</span> <span class="s1">&#39;value1&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">field2</span><span class="o">:</span> <span class="s1">&#39;value2&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">};</span>                         <span class="c1">// 跟随文件一起发送的自定义额外的字段</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ft</span><span class="p">.</span><span class="nx">upload</span><span class="p">(</span> <span class="nx">imageURI</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">op</span><span class="p">.</span><span class="nx">success</span><span class="p">,</span> <span class="nx">op</span><span class="p">.</span><span class="nx">error</span><span class="p">,</span> <span class="nx">options</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">success</span><span class="p">(</span> <span class="nx">fileUploadResult</span> <span class="p">){</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span> <span class="s1">&#39;文件上传成功&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">error</span><span class="p">(</span> <span class="nx">fileTransferError</span> <span class="p">){</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span> <span class="s1">&#39;文件上传失败&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来简单介绍<code>FileUploadResult</code>和<code>FileTransferError</code></p>

<p><strong>FileUploadResult</strong></p>

<p>Properties:</p>

<ul>
<li>bytesSent：总共传送到服务器的字节数</li>
<li>responseCode：服务器返回的HTTP响应码</li>
<li>response：服务其返回数据</li>
</ul>


<p><strong>fileTransferError</strong></p>

<p>文件操作相关的方法出现的异常对象都是使用该对象。</p>

<p>Properties:</p>

<ul>
<li>code: 预先定义的错误代码.</li>
</ul>


<p>预定义的代码有以下三种：</p>

<ul>
<li>FileTransferError.FILE_NOT_FOUND_ERR 文件未找到</li>
<li>FileTransferError.INVALID_URL_ERR 非法的URL</li>
<li>FileTransferError.CONNECTION_ERR 连接错误</li>
</ul>


<p><strong>OK！phoneGap这边主要就是上面两个方法，下一篇文章继续介绍nodejs这边的细节。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NAE初使用]]></title>
    <link href="http://neekey.github.com/blog/2012/01/15/naechu-shi-yong/"/>
    <updated>2012-01-15T15:53:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/15/naechu-shi-yong</id>
    <content type="html"><![CDATA[<p><img src="http://neekey.github.com/images/posts/Nae.png" alt="Nae-image" /></p>

<p><a href="http://cnodejs.net/"><strong>NAE</strong></a>：Node App Engine，是基于Node.js v0.6.2开发的应用托管服务, 可提供node.js应用的在线部署功能。</p>

<p>这两天把毕设作品中的，后端权限验证部分的接口写了大概，准备放到手机上测试。但是手机上要请求本本这边的本地服务器有点麻烦，想想一直闲着没用过的NAE账号，干脆部署到上面去好了。</p>

<p>昨天稻谷了半天，终于成功部署。在这里记下几点想法和总结把。</p>

<!-- more -->


<h3>NAE提供的功能</h3>

<ul>
<li>每个用户可以创建10个应用，每个应用都可以邀请其他用户一起参与合作，也可以申请加入其他人的应用</li>
<li>可以为每个应用自定义子域名，比如<code>neekey.cnodejs.net</code></li>
<li>代码部署

<ul>
<li>支持使用git进行代码管理</li>
<li>支持本地上传</li>
<li>可以自定义使用npm安装需要的模块</li>
</ul>
</li>
<li>提供自带网络代码编辑器（很好用!!）</li>
<li>提供网络日志（不过暂时智能查看，没办法清理啦删除之类的，这个有待改进啊）</li>
<li>提供mongodb数据库，每个应用都拥有一个独立的db</li>
<li>代办事项功能（类似一个todo-list）</li>
</ul>


<p><strong>总体来说，我觉得NAE这样一个免费的应用托管服务，提供的功能还是非常强大的，而且多人开发这样的功能也非常方便多人协作开发！</strong></p>

<h3>第一次使用的几点经验</h3>

<p><strong>配置好你的<code>package.json</code>文件</strong></p>

<p>代码根目录下需要有<code>package.json</code>这个文件，其中要指定需要运行的主文件名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;hello world&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;main&#39;</span><span class="o">:</span> <span class="s1">&#39;./app.js&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果不指定，会自动搜索<code>./index.js</code>文件执行</p>

<p>另外，现在已经提供了<code>package.json</code>的GUI设置功能</p>

<p><strong>数据库连接</strong></p>

<p>默认已经给了数据库账号，密码，数据库名称，端口号。只要根据这些信息，在脚本中进行数据库的连接就可以了，以mongoose为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span> <span class="s1">&#39;mongodb://&#39;</span> <span class="o">+</span> <span class="nx">USERNAME</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">PASSWORD</span> <span class="o">+</span> <span class="s1">&#39;@&#39;</span> <span class="o">+</span> <span class="nx">HOST</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">PORT</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">DATABASE</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于本人粗心大意，第一次部署的时候忘了写上端口，导致日志里有相关错误（但是我看不明白），应用上线后，接口出错！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在nodejs中使用jasmina(一)]]></title>
    <link href="http://neekey.github.com/blog/2012/01/11/zai-nodejszhong-shi-yong-jasmina-1/"/>
    <updated>2012-01-11T21:36:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/11/zai-nodejszhong-shi-yong-jasmina-1</id>
    <content type="html"><![CDATA[<p>寒假在家，终于可以开始好好做毕设！</p>

<p>今天在写后台用户数据操作时，想到每次写类似的模块，在大体完成后总会出现各种Bug，往往调试占用了大量的时间。因此决定这次为每个接口都写一下单元测试。</p>

<p>由于之前听过同事关于<a href="http://pivotal.github.com/jasmine/">Jasmine</a>的分享，感觉还不错，所以就用它了。</p>

<p><img src="http://neekey.github.com/images/posts/jasmine_logo.png" alt="Jasmine-logo" /></p>

<!-- more -->


<h3>为nodejs添加jasmine模块</h3>

<p>由于后端使用<a href="http://nodejs.org/">nodeJS</a>开发，因此先用<a href="http://npmjs.org/">npm</a>安装<a href="http://pivotal.github.com/jasmine/">Jasmine</a></p>

<pre><code>npm install jasmine-node
</code></pre>

<p>安装完成后，就只可以直接在终端中使用jasmine-node命令了</p>

<h3>使用Jasmine-node命令</h3>

<p><strong>Jasmine-node 参数</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>USAGE: jasmine-node <span class="o">[</span>--color|--noColor<span class="o">]</span> <span class="o">[</span>--verbose<span class="o">]</span> <span class="o">[</span>--coffee<span class="o">]</span> directory
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  --color            - use color coding <span class="k">for </span>output
</span><span class='line'>  --noColor          - <span class="k">do </span>not use color coding <span class="k">for </span>output
</span><span class='line'>  -m, --match REGEXP - load only specs containing <span class="s2">&quot;REGEXPspec&quot;</span>
</span><span class='line'>  --verbose          - print extra information per each <span class="nb">test </span>run
</span><span class='line'>  --coffee           - load coffee-script which allows execution .coffee files
</span><span class='line'>  --junitreport      - <span class="nb">export </span>tests results as junitreport xml format
</span><span class='line'>  --teamcity         - converts all console output to teamcity custom <span class="nb">test </span>runner commands. <span class="o">(</span>Normally auto detected.<span class="o">)</span>
</span><span class='line'>  --runWithRequireJs - loads all specs using requirejs instead of node<span class="err">&#39;</span>s native require method
</span><span class='line'>  --test-dir         - the absolute root directory path where tests are located
</span><span class='line'>  --nohelpers        - does not load helpers.
</span><span class='line'>  -h, --help         - display this <span class="nb">help </span>and <span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>使用简单说明</strong></p>

<ul>
<li>指定目录进行单元测试：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>jasmine-node <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>注意指定的目录下的包含单元测试代码的脚本文件必须为js或者coffee格式，并且文件名最后必须为<strong>spec</strong>，比如文件：<code>userSpec.js</code>，<code>user.spec.coffee</code></p>

<ul>
<li>常用的参数简单说明

<ul>
<li>verbose 默认的结果只显示成功了多少，失败了多少，然后显示失败的信息，指定该参数后，会将所有的信息都输出</li>
<li>test-dir 指定目录的绝对路径</li>
</ul>
</li>
</ul>


<h3>如何写测试代码</h3>

<p>由于之前没怎么写过单元测试，因此对测试的理解比较肤浅，我的理解比较简单：</p>

<p><em>通过某个过程得到一个结果，然后判断是否这个结果是我们预期的。一般这样的测试，其结果应该是可以预知并且可以对结果进行判断</em></p>

<p><strong>最简单的测试代码</strong></p>

<p>好，现在我们建立一个test文件夹，从最简单的测试代码开始：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span> <span class="s1">&#39;描述一下这个单元测试&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span> <span class="s1">&#39;算数的结果总是比较容易预测&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span> <span class="mi">3</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>将这个文件命名为 simpleTestSpec.js，然后使用命令:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>jasmine-node <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>描述一下这个单元测试
</span><span class='line'>  算数的结果总是比较容易预测
</span><span class='line'>
</span><span class='line'>Finished in 0.008 seconds
</span><span class='line'>1 <span class="nb">test</span>, 1 assertion, 0 failures
</span></code></pre></td></tr></table></div></figure>


<p>现在我们故意将测试代码改为<code>expect(1+2).toEqual(0);</code>，重新运行一下，得到结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>描述一下这个单元测试
</span><span class='line'>  算数的结果总是比较容易预测
</span><span class='line'>
</span><span class='line'>Failures:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> 算数的结果总是比较容易预测
</span><span class='line'>   Message:
</span><span class='line'>     Expected 3 to equal 0.
</span><span class='line'>   Stacktrace:
</span><span class='line'>     Error: Expected 3 to equal 0.
</span><span class='line'>    at new &lt;anonymous&gt; <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:102:32<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.toEqual <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1171:29<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.&lt;anonymous&gt; <span class="o">(</span>/users/neekey/Desktop/mhevery-jasmine-node-d3dc963/spec/TestSpec.js:4:19<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.execute <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1001:15<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.next_ <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1790:31<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.start <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1743:8<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.execute <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:2070:14<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.next_ <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1790:31<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.start <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:1743:8<span class="o">)</span>
</span><span class='line'>    at <span class="o">[</span>object Object<span class="o">]</span>.execute <span class="o">(</span>/usr/local/lib/node_modules/jasmine-node/lib/jasmine-node/jasmine-2.0.0.rc1.js:2215:14<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Finished in 0.011 seconds
</span><span class='line'>1 <span class="nb">test</span>, 1 assertion, 1 failure
</span></code></pre></td></tr></table></div></figure>


<p>上面的describe可以最为一类测试的<strong>群组</strong>，而it则是这些测试中的其中一<strong>项</strong>。而<code>expect</code>就是做一次<strong>断言</strong>。</p>

<h4>异步代码测试</h4>

<p><a href="http://pivotal.github.com/jasmine/">Jasmine</a>主要提供了三个方法来让我们实现对异步脚本的测试：</p>

<ul>
<li><strong>runs(function)</strong> 官方的说明是：<em>runs() blocks by themselves simply run as if they were called directly</em>, 觉得不是很理解，直接看代码吧，当只有一个<code>runs()</code>的情况下，下面两端代码的效果一致：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be a test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nx">foo</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be a test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">foo</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>出现多个<code>runs()</code>的时候，他们将以串行的方式执行，需要注意的是，在<code>runs()</code>指定的函数内部，<code>this</code>是被多个<code>runs()</code>共享的。
下面这个例子，多个<code>runs()</code>串行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be a test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">bar</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">bar</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">bar</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">bar</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>waits(timeout)</strong> 这个方法和<code>runs()</code>一起使用，我们可以通过该方法来指定阻塞多久再执行下一个<code>runs()</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be a test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">that</span><span class="p">.</span><span class="nx">foo</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">250</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">waits</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">runs</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码在执行完第二个<code>runs()</code>后没有直接执行第三个<code>runs()</code>,知道<code>waits()</code>指定的500毫秒到达后，再执行<code>runs()</code>。利用这个方法，我们可以对一些异步回调（这些回调的返回时间可以估计）进行测试。</p>

<p>需要注意的是，如果第三个<code>runs()</code>内的代码不用runs来包裹，直接写在外面，<strong>将无法被阻塞执行。</strong></p>

<ul>
<li><strong>waitsFor(function, optional message, optional timeout)</strong> 在很多情况下，我们无法确切地知道回调的在什么时候返回（比如用户的自定义事件，鼠标点击等），这个时候我们就可以使用该方法。该方法只有在给定的function返回了<code>true</code>后才会执行下一个<code>runs()</code>，还可以指定最长等待时间，如果在这个时间内还没有返回<code>true</code>，则显示<code>optional message</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;waitsFor Test&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;after 2sec, it will be true&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">iWillBeTrue</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">iWillBeTrue</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">2000</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">waitsFor</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">iWillBeTrue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span> <span class="s2">&quot;maybe i will never be true&quot;</span><span class="p">,</span> <span class="mi">10000</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">runs</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span> <span class="nx">iWillBeTrue</span> <span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span> <span class="kc">true</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>waitsFor Test
</span><span class='line'>  after 2sec, it will be <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>Finished in 2.013 seconds
</span><span class='line'>1 <span class="nb">test</span>, 1 assertion, 0 failures
</span></code></pre></td></tr></table></div></figure>


<p>我们去掉<code>setTimeout</code>，那么应该<code>iWillBeTrue</code>将永远为<code>false</code>，重新运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>waitsFor Test
</span><span class='line'>  after 2sec, it will be <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>Failures:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> after 2sec, it will be <span class="nb">true</span>
</span><span class='line'><span class="nb">   </span>Message:
</span><span class='line'>     timeout: timed out after 10000 msec waiting <span class="k">for </span>maybe i will never be <span class="nb">true</span>
</span><span class='line'><span class="nb">   </span>Stacktrace:
</span><span class='line'>     undefined
</span><span class='line'>
</span><span class='line'>Finished in 10.921 seconds
</span><span class='line'>1 <span class="nb">test</span>, 1 assertion, 1 failure
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>总体上来说，<a href="http://pivotal.github.com/jasmine/">Jasmine</a>感觉还不错，特别是提供的这几个异步测试的方法，基本上能满足一般单元测试的需求。</p>

<p>先介绍到这，更多细节后续会跟进。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopass部署]]></title>
    <link href="http://neekey.github.com/blog/2012/01/08/octopassbu-shu/"/>
    <updated>2012-01-08T20:32:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/08/octopassbu-shu</id>
    <content type="html"><![CDATA[<p>部署可以参考：<a href="http://octopress.org/docs/setup/">Octopress Setup</a></p>

<h3>本地部署</h3>

<p><strong>首先是配置Octopress需要的环境：</strong></p>

<ul>
<li>由于Octopress需要使用到Git，因此需要先安装<a href="http://git-scm.com/">Git</a></li>
<li>ruby 1.9.2 ( 可以使用RVM或者rbenv，他们都是ruby的环境管理软件 )</li>
</ul>


<p><strong>安装RVM</strong></p>

<p>用以下命令安装：</p>

<p><code>bash &lt; &lt;(curl -s https://rvm.beginrescueend.com/install/rvm)</code></p>

<p>安装完成后，需要修改用户目录下的.bash_profile文件，将RVM设置为shell的一个function:</p>

<pre><code>echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bash_profile
source ~/.bash_profile

# If using Zsh do this instead
echo '[[ -s $HOME/.rvm/scripts/rvm ]] &amp;&amp; source $HOME/.rvm/scripts/rvm' &gt;&gt; ~/.zshrc
source ~/.zshrc
</code></pre>

<p>由于我自己对shell命令不是很熟悉，所以简单的查了一下资料。上面的命令中：</p>

<ul>
<li>echo <code>echo 'text' &gt;&gt; targetfile</code> 将text添加到目标文件尾</li>
<li>source <code>source fileHasCodeToRun</code> 执行指定文件中的脚本</li>
</ul>


<!-- more -->


<p><strong>安装ruby 1.9.2</strong></p>

<p>用安装好的rvm来安装ruby 和 <a href="http://rubygems.org/">rubygems</a>(ruby的包管理器)</p>

<pre><code>rvm install 1.9.2 &amp;&amp; rvm use 1.9.2
rvm rubygems latest
</code></pre>

<p><strong>配置Octopass</strong></p>

<p>首先将Octopass的源码clone到本地</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
ruby --version  # Should report Ruby 1.9.2
</code></pre>

<p>注意此处一定要确保<code>ruby --version</code>是1.9.2，否则后面的步骤会出错。</p>

<p>进入Octopass根目录后，安装依赖包：</p>

<pre><code>gem install bundler # 应该是一个用来管理依赖的组件(=.=)
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
</code></pre>

<p>安装完成后，再安装Octopass默认的主题：</p>

<pre><code>rake install
</code></pre>

<p>至此，本地的Octopass就差不多部署完毕了。</p>

<hr />

<h3>部署Octopass到Github Page</h3>

<p>可以直接参考官方的说明：<a href="http://pages.github.com">Github Page</a></p>

<p>简单的来说，就是：</p>

<ul>
<li>建立一个repository，命名：reponame.github.com</li>
<li>在该 repo 根目录下放置一个index.html</li>
<li>通过reponame.github.com来访问</li>
</ul>


<p>非常简单吧！当然Github Page也支持<a href="http://neekey.github.com//http://pages.github.com/#custom_domains">Custom Domain</a></p>

<p>建立好你自己的Github Page后，回到Octopass目录，使用一下命令：</p>

<pre><code>rake setup_github_page
</code></pre>

<p>这个命令将：</p>

<ul>
<li>让你输入你的Github Page的repo的url</li>
<li>Rename the remote pointing to imathis/octopress from ‘origin’ to ‘octopress’(不是很懂…这是原文)</li>
<li><p>将你的Github Page的repo的url作为默认的origin remote</p>

<p>  其实在这里，你在github上的repo对应的本地目录是Octopass/_deploy目录，这个目录下是编译后的静态文件。</p></li>
<li><p>从master分支转换到source分支</p>

<p>  我自己部署的时候发现没有这个变化。而且所谓的source，我自己认为应该是整个Octopass文件夹（里面的_deploy文件夹下的内容倒是不重要，因为每次<code>rake generate</code>都能更新）。我的做法是，<code>git init</code>整个Octopass文件夹，然后<code>add .</code>把所有文件都以<em>source</em>分支提交。</p></li>
<li><p>配置blog的url指向repo</p></li>
<li>为_deploy目录设置master分支，用户部署</li>
</ul>


<p>总之，这个命令的作用我自己还是有点<strong>confused</strong></p>

<p>然后就是生成<strong>_deploy/</strong>目录下的文件，并部署到<strong>github</strong>上:</p>

<pre><code>rake generate
rake deploy
</code></pre>

<p>那么现在的repo各分支的状态就是：</p>

<ul>
<li>master： 对应_deploy目录下的文件</li>
<li>source： 对应Octopass目录下的所有文件（但是不包括_deploy）</li>
</ul>


<p>这样我们就可以用source分支来编辑blog，使用master来发布!</p>

<p><strong>Have Fun！</strong></p>

<hr />

<p>暂时准备先用这个github的域名，过一阵子觉得真心不错的时候，再考虑直接将我的<a href="http://neekey.net/blog">neekey.net</a>指向这边好了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress]]></title>
    <link href="http://neekey.github.com/blog/2012/01/08/octopass/"/>
    <updated>2012-01-08T19:27:00+08:00</updated>
    <id>http://neekey.github.com/blog/2012/01/08/octopass</id>
    <content type="html"><![CDATA[<p>捣鼓了很久，终于将<a href="http://octopress.org/" title="octopress">octopress</a>部署完毕。从此摆脱Wordpress开始开始Geek式的blog生活！</p>

<p><img src="http://octopress.org/images/logo.png?1325260964" alt="OctopassLogo" /></p>

<p>octopress<strong>官方介绍</strong>：</p>

<blockquote><p>Octopress is a framework designed by Brandon Mathis for Jekyll, the blog aware static site generator powering Github Pages. To start blogging with Jekyll, you have to write your own HTML templates, CSS, Javascripts and set up your configuration. But with Octopress All of that is already taken care of. Simply clone or fork Octopress, install dependencies and the theme, and you’re set.</p></blockquote>

<p>由于本人也是刚刚接触<a href="http://octopress.org/" title="octopress">octopress</a>，了解不是很深入，我自己感觉它主要有下面这些特点：</p>

<ol>
<li>基于Ruby（所以对Ruby开发者来说非常友好）</li>
<li>支持Markdown</li>
<li><p>使用git进行版本控制</p>

<p> <a href="http://octopress.org/" title="octopress">octopress</a>本身不需要任何database，所有的数据都是静态文件，然后使用git进行维护。</p></li>
<li><p>轻松部署</p>

<p> <a href="http://octopress.org/" title="octopress">octopress</a>使用<a href="http://jekyllrb.com/" title="jekyll">Jekyll</a>静态网站产生引擎，可以轻松生成<strong>static-file based</strong>类型的网站，部署非常方便（如上面一条，不需要任何database）</p>

<p> 你可以渲染放置到自己的服务器上，<a href="http://www.heroku.com/" title="Heroku">Heroku</a>，或者是<a href="http://pages.github.com/" title="github page">Github Page</a>（我就是放到git上的，很cool吧！）上。</p></li>
<li>支持各种插件</li>
<li>支持<a href="https://gist.github.com/" title="gist">gist</a>(没用过，但是貌似很给力的样子，hoho！)</li>
<li>使用<a href="http://sass-lang.com/" title="SASS">SASS</a>，<a href="http://compass-style.org/" title="Compass">Compass</a>等新奇玩意</li>
</ol>


<p>OK！大体就是这样，具体可以直接到官网看文档。下一篇文章会详细介绍下如何部署Octopass！</p>
]]></content>
  </entry>
  
</feed>
